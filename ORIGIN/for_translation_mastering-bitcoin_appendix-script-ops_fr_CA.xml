<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<articleinfo>
    <date>2022-03-04</date>
</articleinfo>
<appendix id="tx_script_ops">
<title>Transaction Script Language Operators, Constants, and Symbols</title>
<note>
<simpara>Tables and descriptions sourced from <ulink url="https://en.bitcoin.it/wiki/Script">https://en.bitcoin.it/wiki/Script</ulink>.</simpara>
</note>
<simpara><xref linkend="tx_script_ops_table_pushdata"/> shows operators for pushing values onto the stack.<indexterm>
  <primary>transactions</primary><secondary>scripts and Script language</secondary>
</indexterm>
<indexterm>
  <primary>scripts and Script language</primary>
</indexterm><indexterm>
  <primary>scripting</primary><secondary>Script language operators, constants, and symbols</secondary>
</indexterm>
<indexterm>
  <primary>Script language operators, constants, and symbols</primary>
</indexterm></simpara>
<table id="tx_script_ops_table_pushdata"
frame="all"
rowsep="1" colsep="1"
>
<title>Push value onto stack</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top"> Symbol </entry>
<entry align="left" valign="top"> Value (hex) </entry>
<entry align="left" valign="top"> Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>OP_0 or OP_FALSE</simpara></entry>
<entry align="left" valign="top"><simpara>0x00</simpara></entry>
<entry align="left" valign="top"><simpara>An empty array is pushed onto the stack</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>1 to 75</simpara></entry>
<entry align="left" valign="top"><simpara>0x01 to 0x4b</simpara></entry>
<entry align="left" valign="top"><simpara>Push the next N bytes onto the stack, where N is 1 to 75 bytes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_PUSHDATA1</simpara></entry>
<entry align="left" valign="top"><simpara>0x4c</simpara></entry>
<entry align="left" valign="top"><simpara>The next script byte contains N, push the following N bytes onto the stack</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_PUSHDATA2</simpara></entry>
<entry align="left" valign="top"><simpara>0x4d</simpara></entry>
<entry align="left" valign="top"><simpara>The next two script bytes contain N, push the following N bytes onto the stack</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_PUSHDATA4</simpara></entry>
<entry align="left" valign="top"><simpara>0x4e</simpara></entry>
<entry align="left" valign="top"><simpara>The next four script bytes contain N, push the following N bytes onto the stack</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_1NEGATE</simpara></entry>
<entry align="left" valign="top"><simpara>0x4f</simpara></entry>
<entry align="left" valign="top"><simpara>Push the value "â€“1" onto the stack</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_RESERVED</simpara></entry>
<entry align="left" valign="top"><simpara>0x50</simpara></entry>
<entry align="left" valign="top"><simpara>Halt&#x2014;Invalid transaction unless found in an unexecuted OP_IF clause</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_1 or OP_TRUE</simpara></entry>
<entry align="left" valign="top"><simpara>0x51</simpara></entry>
<entry align="left" valign="top"><simpara>Push the value "1" onto the stack</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_2 to OP_16</simpara></entry>
<entry align="left" valign="top"><simpara>0x52 to 0x60</simpara></entry>
<entry align="left" valign="top"><simpara>For OP_N, push the value "N" onto the stack, e.g., OP_2 pushes "2"</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara role="pagebreak-before"><xref linkend="tx_script_ops_table_control"/> shows conditional flow control operators.</simpara>
<table id="tx_script_ops_table_control"
frame="all"
rowsep="1" colsep="1"
>
<title>Conditional flow control</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top"> Symbol </entry>
<entry align="left" valign="top"> Value (hex) </entry>
<entry align="left" valign="top"> Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>OP_NOP</simpara></entry>
<entry align="left" valign="top"><simpara>0x61</simpara></entry>
<entry align="left" valign="top"><simpara>Do nothing</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_VER</simpara></entry>
<entry align="left" valign="top"><simpara>0x62</simpara></entry>
<entry align="left" valign="top"><simpara>Halt&#x2014;Invalid transaction unless found in an unexecuted OP_IF clause</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_IF</simpara></entry>
<entry align="left" valign="top"><simpara>0x63</simpara></entry>
<entry align="left" valign="top"><simpara>Execute the statements following if top of stack is not 0</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_NOTIF</simpara></entry>
<entry align="left" valign="top"><simpara>0x64</simpara></entry>
<entry align="left" valign="top"><simpara>Execute the statements following if top of stack is 0</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_VERIF</simpara></entry>
<entry align="left" valign="top"><simpara>0x65</simpara></entry>
<entry align="left" valign="top"><simpara>Halt&#x2014;Invalid transaction</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_VERNOTIF</simpara></entry>
<entry align="left" valign="top"><simpara>0x66</simpara></entry>
<entry align="left" valign="top"><simpara>Halt&#x2014;Invalid transaction</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_ELSE</simpara></entry>
<entry align="left" valign="top"><simpara>0x67</simpara></entry>
<entry align="left" valign="top"><simpara>Execute only if the previous statements were not executed</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_ENDIF</simpara></entry>
<entry align="left" valign="top"><simpara>0x68</simpara></entry>
<entry align="left" valign="top"><simpara>End the OP_IF, OP_NOTIF, OP_ELSE block</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_VERIFY</simpara></entry>
<entry align="left" valign="top"><simpara>0x69</simpara></entry>
<entry align="left" valign="top"><simpara>Check the top of the stack, halt and invalidate transaction if not TRUE</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_RETURN</simpara></entry>
<entry align="left" valign="top"><simpara>0x6a</simpara></entry>
<entry align="left" valign="top"><simpara>Halt and invalidate transaction</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><xref linkend="tx_script_ops_table_timelock"/> shows operators used for timelocks.</simpara>
<table id="tx_script_ops_table_timelock"
frame="all"
rowsep="1" colsep="1"
>
<title>Timelock operations</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top"> Symbol </entry>
<entry align="left" valign="top"> Value (hex) </entry>
<entry align="left" valign="top"> Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>OP_CHECKLOCKTIMEVERIFY (previously OP_NOP2)</simpara></entry>
<entry align="left" valign="top"><simpara>0xb1</simpara></entry>
<entry align="left" valign="top"><simpara>Marks transaction as invalid if the top stack item is greater than the transaction&#8217;s nLockTime field, otherwise script evaluation continues as though an OP_NOP was executed. Transaction is also invalid if 1. the stack is empty; or 2. the top stack item is negative; or 3. the top stack item is greater than or equal to 500000000 while the transaction&#8217;s nLockTime field is less than 500000000, or vice versa; or 4. the input&#8217;s nSequence field is equal to 0xffffffff. The precise semantics are described in BIP-65</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_CHECKSEQUENCEVERIFY (previously OP_NOP3)</simpara></entry>
<entry align="left" valign="top"><simpara>0xb2</simpara></entry>
<entry align="left" valign="top"><simpara>Marks transaction as invalid if the relative lock time of the input (enforced by BIP 0068 with nSequence) is not equal to or longer than the value of the top stack item. The precise semantics are described in BIP-112</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><xref linkend="tx_script_ops_table_stack"/> shows operators used to manipulate the stack.</simpara>
<table id="tx_script_ops_table_stack"
frame="all"
rowsep="1" colsep="1"
>
<title>Stack operations</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top"> Symbol </entry>
<entry align="left" valign="top"> Value (hex) </entry>
<entry align="left" valign="top"> Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>OP_TOALTSTACK</simpara></entry>
<entry align="left" valign="top"><simpara>0x6b</simpara></entry>
<entry align="left" valign="top"><simpara>Pop top item from stack and push to alternative stack</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_FROMALTSTACK</simpara></entry>
<entry align="left" valign="top"><simpara>0x6c</simpara></entry>
<entry align="left" valign="top"><simpara>Pop top item from alternative stack and push to stack</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_2DROP</simpara></entry>
<entry align="left" valign="top"><simpara>0x6d</simpara></entry>
<entry align="left" valign="top"><simpara>Pop top two stack items</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_2DUP</simpara></entry>
<entry align="left" valign="top"><simpara>0x6e</simpara></entry>
<entry align="left" valign="top"><simpara>Duplicate top two stack items</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_3DUP</simpara></entry>
<entry align="left" valign="top"><simpara>0x6f</simpara></entry>
<entry align="left" valign="top"><simpara>Duplicate top three stack items</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_2OVER</simpara></entry>
<entry align="left" valign="top"><simpara>0x70</simpara></entry>
<entry align="left" valign="top"><simpara>Copy the third and fourth items in the stack to the top</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_2ROT</simpara></entry>
<entry align="left" valign="top"><simpara>0x71</simpara></entry>
<entry align="left" valign="top"><simpara>Move the fifth and sixth items in the stack to the top</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_2SWAP</simpara></entry>
<entry align="left" valign="top"><simpara>0x72</simpara></entry>
<entry align="left" valign="top"><simpara>Swap the two top pairs of items in the stack</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_IFDUP</simpara></entry>
<entry align="left" valign="top"><simpara>0x73</simpara></entry>
<entry align="left" valign="top"><simpara>Duplicate the top item in the stack if it is not 0</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_DEPTH</simpara></entry>
<entry align="left" valign="top"><simpara>0x74</simpara></entry>
<entry align="left" valign="top"><simpara>Count the items on the stack and push the resulting count</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_DROP</simpara></entry>
<entry align="left" valign="top"><simpara>0x75</simpara></entry>
<entry align="left" valign="top"><simpara>Pop the top item in the stack</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_DUP</simpara></entry>
<entry align="left" valign="top"><simpara>0x76</simpara></entry>
<entry align="left" valign="top"><simpara>Duplicate the top item in the stack</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_NIP</simpara></entry>
<entry align="left" valign="top"><simpara>0x77</simpara></entry>
<entry align="left" valign="top"><simpara>Pop the second item in the stack</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_OVER</simpara></entry>
<entry align="left" valign="top"><simpara>0x78</simpara></entry>
<entry align="left" valign="top"><simpara>Copy the second item in the stack and push it onto the top</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_PICK</simpara></entry>
<entry align="left" valign="top"><simpara>0x79</simpara></entry>
<entry align="left" valign="top"><simpara>Pop value N from top, then copy the Nth item to the top of the stack</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_ROLL</simpara></entry>
<entry align="left" valign="top"><simpara>0x7a</simpara></entry>
<entry align="left" valign="top"><simpara>Pop value N from top, then move the Nth item to the top of the stack</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_ROT</simpara></entry>
<entry align="left" valign="top"><simpara>0x7b</simpara></entry>
<entry align="left" valign="top"><simpara>Rotate the top three items in the stack</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_SWAP</simpara></entry>
<entry align="left" valign="top"><simpara>0x7c</simpara></entry>
<entry align="left" valign="top"><simpara>Swap the top two items on the stack</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_TUCK</simpara></entry>
<entry align="left" valign="top"><simpara>0x7d</simpara></entry>
<entry align="left" valign="top"><simpara>Copy the top item and insert it between the top and second item</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><xref linkend="tx_script_ops_table_splice"/> shows string operators.</simpara>
<table id="tx_script_ops_table_splice"
frame="all"
rowsep="1" colsep="1"
>
<title>String splice operations</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top"> Symbol </entry>
<entry align="left" valign="top"> Value (hex) </entry>
<entry align="left" valign="top"> Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis>OP_CAT</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>0x7e</simpara></entry>
<entry align="left" valign="top"><simpara>Disabled (concatenates top two items)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>OP_SUBSTR</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>0x7f</simpara></entry>
<entry align="left" valign="top"><simpara>Disabled (returns substring)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>OP_LEFT</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>0x80</simpara></entry>
<entry align="left" valign="top"><simpara>Disabled (returns left substring)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>OP_RIGHT</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>0x81</simpara></entry>
<entry align="left" valign="top"><simpara>Disabled (returns right substring)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_SIZE</simpara></entry>
<entry align="left" valign="top"><simpara>0x82</simpara></entry>
<entry align="left" valign="top"><simpara>Calculate string length of top item and push the result</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><xref linkend="tx_script_ops_table_binmath"/> shows binary arithmetic and boolean logic operators.</simpara>
<table id="tx_script_ops_table_binmath"
frame="all"
rowsep="1" colsep="1"
>
<title>Binary arithmetic and conditionals</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top"> Symbol </entry>
<entry align="left" valign="top"> Value (hex) </entry>
<entry align="left" valign="top"> Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis>OP_INVERT</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>0x83</simpara></entry>
<entry align="left" valign="top"><simpara>Disabled (Flip the bits of the top item)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>OP_AND</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>0x84</simpara></entry>
<entry align="left" valign="top"><simpara>Disabled (Boolean AND of two top items)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>OP_OR</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>0x85</simpara></entry>
<entry align="left" valign="top"><simpara>Disabled (Boolean OR of two top items)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>OP_XOR</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>0x86</simpara></entry>
<entry align="left" valign="top"><simpara>Disabled (Boolean XOR of two top items)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_EQUAL</simpara></entry>
<entry align="left" valign="top"><simpara>0x87</simpara></entry>
<entry align="left" valign="top"><simpara>Push TRUE (1) if top two items are exactly equal, push FALSE (0) otherwise</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_EQUALVERIFY</simpara></entry>
<entry align="left" valign="top"><simpara>0x88</simpara></entry>
<entry align="left" valign="top"><simpara>Same as OP_EQUAL, but run OP_VERIFY after to halt if not TRUE</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_RESERVED1</simpara></entry>
<entry align="left" valign="top"><simpara>0x89</simpara></entry>
<entry align="left" valign="top"><simpara>Halt&#x2014;Invalid transaction unless found in an unexecuted OP_IF clause</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_RESERVED2</simpara></entry>
<entry align="left" valign="top"><simpara>0x8a</simpara></entry>
<entry align="left" valign="top"><simpara>Halt&#x2014;Invalid transaction unless found in an unexecuted OP_IF clause</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara role="pagebreak-before"><xref linkend="tx_script_ops_table_numbers"/> shows numeric (arithmetic) operators.</simpara>
<table id="tx_script_ops_table_numbers"
frame="all"
rowsep="1" colsep="1"
>
<title>Numeric operators</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top"> Symbol </entry>
<entry align="left" valign="top"> Value (hex) </entry>
<entry align="left" valign="top"> Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>OP_1ADD</simpara></entry>
<entry align="left" valign="top"><simpara>0x8b</simpara></entry>
<entry align="left" valign="top"><simpara>Add 1 to the top item</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_1SUB</simpara></entry>
<entry align="left" valign="top"><simpara>0x8c</simpara></entry>
<entry align="left" valign="top"><simpara>Subtract 1 from the top item</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>OP_2MUL</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>0x8d</simpara></entry>
<entry align="left" valign="top"><simpara>Disabled (multiply top item by 2)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>OP_2DIV</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>0x8e</simpara></entry>
<entry align="left" valign="top"><simpara>Disabled (divide top item by 2)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_NEGATE</simpara></entry>
<entry align="left" valign="top"><simpara>0x8f</simpara></entry>
<entry align="left" valign="top"><simpara>Flip the sign of top item</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_ABS</simpara></entry>
<entry align="left" valign="top"><simpara>0x90</simpara></entry>
<entry align="left" valign="top"><simpara>Change the sign of the top item to positive</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_NOT</simpara></entry>
<entry align="left" valign="top"><simpara>0x91</simpara></entry>
<entry align="left" valign="top"><simpara>If top item is 0 or 1 Boolean flip it, otherwise return 0</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_0NOTEQUAL</simpara></entry>
<entry align="left" valign="top"><simpara>0x92</simpara></entry>
<entry align="left" valign="top"><simpara>If top item is 0 return 0, otherwise return 1</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_ADD</simpara></entry>
<entry align="left" valign="top"><simpara>0x93</simpara></entry>
<entry align="left" valign="top"><simpara>Pop top two items, add them and push result</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_SUB</simpara></entry>
<entry align="left" valign="top"><simpara>0x94</simpara></entry>
<entry align="left" valign="top"><simpara>Pop top two items, subtract first from second, push result</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>OP_MUL</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>0x95</simpara></entry>
<entry align="left" valign="top"><simpara>Disabled (multiply top two items)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>OP_DIV</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>0x96</simpara></entry>
<entry align="left" valign="top"><simpara>Disabled (divide second item by first item)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>OP_MOD</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>0x97</simpara></entry>
<entry align="left" valign="top"><simpara>Disabled (remainder divide second item by first item)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>OP_LSHIFT</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>0x98</simpara></entry>
<entry align="left" valign="top"><simpara>Disabled (shift second item left by first item number of bits)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>OP_RSHIFT</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>0x99</simpara></entry>
<entry align="left" valign="top"><simpara>Disabled (shift second item right by first item number of bits)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_BOOLAND</simpara></entry>
<entry align="left" valign="top"><simpara>0x9a</simpara></entry>
<entry align="left" valign="top"><simpara>Boolean AND of top two items</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_BOOLOR</simpara></entry>
<entry align="left" valign="top"><simpara>0x9b</simpara></entry>
<entry align="left" valign="top"><simpara>Boolean OR of top two items</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_NUMEQUAL</simpara></entry>
<entry align="left" valign="top"><simpara>0x9c</simpara></entry>
<entry align="left" valign="top"><simpara>Return TRUE if top two items are equal numbers</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_NUMEQUALVERIFY</simpara></entry>
<entry align="left" valign="top"><simpara>0x9d</simpara></entry>
<entry align="left" valign="top"><simpara>Same as NUMEQUAL, then OP_VERIFY to halt if not TRUE</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_NUMNOTEQUAL</simpara></entry>
<entry align="left" valign="top"><simpara>0x9e</simpara></entry>
<entry align="left" valign="top"><simpara>Return TRUE if top two items are not equal numbers</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_LESSTHAN</simpara></entry>
<entry align="left" valign="top"><simpara>0x9f</simpara></entry>
<entry align="left" valign="top"><simpara>Return TRUE if second item is less than top item</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_GREATERTHAN</simpara></entry>
<entry align="left" valign="top"><simpara>0xa0</simpara></entry>
<entry align="left" valign="top"><simpara>Return TRUE if second item is greater than top item</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_LESSTHANOREQUAL</simpara></entry>
<entry align="left" valign="top"><simpara>0xa1</simpara></entry>
<entry align="left" valign="top"><simpara>Return TRUE if second item is less than or equal to top item</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_GREATERTHANOREQUAL</simpara></entry>
<entry align="left" valign="top"><simpara>0xa2</simpara></entry>
<entry align="left" valign="top"><simpara>Return TRUE if second item is great than or equal to top item</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_MIN</simpara></entry>
<entry align="left" valign="top"><simpara>0xa3</simpara></entry>
<entry align="left" valign="top"><simpara>Return the smaller of the two top items</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_MAX</simpara></entry>
<entry align="left" valign="top"><simpara>0xa4</simpara></entry>
<entry align="left" valign="top"><simpara>Return the larger of the two top items</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_WITHIN</simpara></entry>
<entry align="left" valign="top"><simpara>0xa5</simpara></entry>
<entry align="left" valign="top"><simpara>Return TRUE if the third item is between the second item (or equal) and first item</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara role="pagebreak-before"><xref linkend="tx_script_ops_table_crypto"/> shows cryptographic function operators.</simpara>
<table id="tx_script_ops_table_crypto"
frame="all"
rowsep="1" colsep="1"
>
<title>Cryptographic and hashing operations</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top"> Symbol </entry>
<entry align="left" valign="top"> Value (hex) </entry>
<entry align="left" valign="top"> Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>OP_RIPEMD160</simpara></entry>
<entry align="left" valign="top"><simpara>0xa6</simpara></entry>
<entry align="left" valign="top"><simpara>Return RIPEMD160 hash of top item</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_SHA1</simpara></entry>
<entry align="left" valign="top"><simpara>0xa7</simpara></entry>
<entry align="left" valign="top"><simpara>Return SHA1 hash of top item</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_SHA256</simpara></entry>
<entry align="left" valign="top"><simpara>0xa8</simpara></entry>
<entry align="left" valign="top"><simpara>Return SHA256 hash of top item</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_HASH160</simpara></entry>
<entry align="left" valign="top"><simpara>0xa9</simpara></entry>
<entry align="left" valign="top"><simpara>Return RIPEMD160(SHA256(x)) hash of top item</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_HASH256</simpara></entry>
<entry align="left" valign="top"><simpara>0xaa</simpara></entry>
<entry align="left" valign="top"><simpara>Return SHA256(SHA256(x)) hash of top item</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_CODESEPARATOR</simpara></entry>
<entry align="left" valign="top"><simpara>0xab</simpara></entry>
<entry align="left" valign="top"><simpara>Mark the beginning of signature-checked data</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_CHECKSIG</simpara></entry>
<entry align="left" valign="top"><simpara>0xac</simpara></entry>
<entry align="left" valign="top"><simpara>Pop a public key and signature and validate the signature for the transaction&#8217;s hashed data, return TRUE if matching</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_CHECKSIGVERIFY</simpara></entry>
<entry align="left" valign="top"><simpara>0xad</simpara></entry>
<entry align="left" valign="top"><simpara>Same as CHECKSIG, then OP_VERIFY to halt if not TRUE</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_CHECKMULTISIG</simpara></entry>
<entry align="left" valign="top"><simpara>0xae</simpara></entry>
<entry align="left" valign="top"><simpara>Run CHECKSIG for each pair of signature and public key provided. All must match. Bug in implementation pops an extra value, prefix with OP_0 as workaround</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_CHECKMULTISIGVERIFY</simpara></entry>
<entry align="left" valign="top"><simpara>0xaf</simpara></entry>
<entry align="left" valign="top"><simpara>Same as CHECKMULTISIG, then OP_VERIFY to halt if not TRUE</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><xref linkend="tx_script_ops_table_nop"/> shows nonoperator symbols.</simpara>
<table id="tx_script_ops_table_nop"
frame="all"
rowsep="1" colsep="1"
>
<title>Nonoperators</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top"> Symbol </entry>
<entry align="left" valign="top"> Value (hex) </entry>
<entry align="left" valign="top"> Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>OP_NOP1 to OP_NOP10</simpara></entry>
<entry align="left" valign="top"><simpara>0xb0 to 0xb9</simpara></entry>
<entry align="left" valign="top"><simpara>Does nothing, ignored</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><xref linkend="tx_script_ops_table_internal"/> shows operator codes reserved for use by the internal script parser.<indexterm>
  <primary></primary>
</indexterm><indexterm>
  <primary></primary>
</indexterm></simpara>
<table id="tx_script_ops_table_internal"
frame="all"
rowsep="1" colsep="1"
>
<title>Reserved OP codes for internal use by the parser</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top"> Symbol </entry>
<entry align="left" valign="top"> Value (hex) </entry>
<entry align="left" valign="top"> Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>OP_SMALLDATA</simpara></entry>
<entry align="left" valign="top"><simpara>0xf9</simpara></entry>
<entry align="left" valign="top"><simpara>Represents small data field</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_SMALLINTEGER</simpara></entry>
<entry align="left" valign="top"><simpara>0xfa</simpara></entry>
<entry align="left" valign="top"><simpara>Represents small integer data field</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_PUBKEYS</simpara></entry>
<entry align="left" valign="top"><simpara>0xfb</simpara></entry>
<entry align="left" valign="top"><simpara>Represents public key fields</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_PUBKEYHASH</simpara></entry>
<entry align="left" valign="top"><simpara>0xfd</simpara></entry>
<entry align="left" valign="top"><simpara>Represents a public key hash field</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_PUBKEY</simpara></entry>
<entry align="left" valign="top"><simpara>0xfe</simpara></entry>
<entry align="left" valign="top"><simpara>Represents a public key field</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OP_INVALIDOPCODE</simpara></entry>
<entry align="left" valign="top"><simpara>0xff</simpara></entry>
<entry align="left" valign="top"><simpara>Represents any OP code not currently assigned</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</appendix>
</article>
