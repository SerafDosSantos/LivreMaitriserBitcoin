<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<articleinfo>
    <date>2022-03-04</date>
</articleinfo>
<appendix id="appdx_bx">
<title>Bitcoin Explorer (bx) Commands</title>
<simpara><indexterm>
  <primary>Bitcoin Explorer (bx) commands</primary>
</indexterm>Bitcoin Explorer (bx) is a command-line tool that offers a variety of commands for key management and transaction construction. It is part of the libbitcoin bitcoin library.</simpara>
<screen>Usage: bx COMMAND [--help]

Info: The bx commands are:

address-decode
address-embed
address-encode
address-validate
base16-decode
base16-encode
base58-decode
base58-encode
base58check-decode
base58check-encode
base64-decode
base64-encode
bitcoin160
bitcoin256
btc-to-satoshi
ec-add
ec-add-secrets
ec-multiply
ec-multiply-secrets
ec-new
ec-to-address
ec-to-public
ec-to-wif
fetch-balance
fetch-header
fetch-height
fetch-history
fetch-stealth
fetch-tx
fetch-tx-index
hd-new
hd-private
hd-public
hd-to-address
hd-to-ec
hd-to-public
hd-to-wif
help
input-set
input-sign
input-validate
message-sign
message-validate
mnemonic-decode
mnemonic-encode
ripemd160
satoshi-to-btc
script-decode
script-encode
script-to-address
seed
send-tx
send-tx-node
send-tx-p2p
settings
sha160
sha256
sha512
stealth-decode
stealth-encode
stealth-public
stealth-secret
stealth-shared
tx-decode
tx-encode
uri-decode
uri-encode
validate-tx
watch-address
wif-to-ec
wif-to-public
wrap-decode
wrap-encode</screen>
<simpara>For more information, see the <ulink url="https://github.com/libbitcoin/libbitcoin-explorer">Bitcoin Explorer homepage</ulink> and <ulink url="https://github.com/libbitcoin/libbitcoin-explorer/wiki">Bitcoin Explorer user documentation</ulink>.</simpara>
<section id="_examples_of_bx_command_use">
<title>Examples of bx Command Use</title>
<simpara>Let&#8217;s look at some examples of using Bitcoin Explorer commands to experiment with keys and addresses.</simpara>
<simpara>Generate a random "seed" value using the <literal>seed</literal> command, which uses the operating system&#8217;s random number generator. Pass the seed to the <literal>ec-new</literal> command to generate a new private key. We save the standard output into the file <emphasis>private_key</emphasis>:</simpara>
<screen>$ bx seed | bx ec-new &gt; private_key
$ cat private_key
73096ed11ab9f1db6135857958ece7d73ea7c30862145bcc4bbc7649075de474</screen>
<simpara>Now, generate the public key from that private key using the <literal>ec-to-public</literal> command. We pass the <emphasis>private_key</emphasis> file into the standard input and save the standard output of the command into a new file <emphasis>public_key</emphasis>:</simpara>
<screen>$ bx ec-to-public &lt; private_key &gt; public_key
$ cat public_key
02fca46a6006a62dfdd2dbb2149359d0d97a04f430f12a7626dd409256c12be500</screen>
<simpara>We can reformat the <literal>public_key</literal> as an address using the <literal>ec-to-address</literal> command. We pass the <emphasis>public_key</emphasis> into standard input:</simpara>
<screen>$ bx ec-to-address &lt; public_key
17re1S4Q8ZHyCP8Kw7xQad1Lr6XUzWUnkG</screen>
<simpara>Keys generated in this manner produce a type-0 nondeterministic wallet. That means that each key is generated from an independent seed. Bitcoin Explorer commands can also generate keys deterministically, in accordance with BIP-32. In this case, a "master" key is created from a seed and then extended deterministically to produce a tree of subkeys, resulting in a type-2 deterministic wallet.</simpara>
<simpara>First, we use the <literal>seed</literal> and <literal>hd-new</literal> commands to generate a master key that will be used as the basis to derive a hierarchy of keys:</simpara>
<screen>$ bx seed &gt; seed
$ cat seed
eb68ee9f3df6bd4441a9feadec179ff1

$ bx hd-new &lt; seed &gt; master
$ cat master
xprv9s21ZrQH143K2BEhMYpNQoUvAgiEjArAVaZaCTgsaGe6LsAnwubeiTcDzd23mAoyizm9cApe51gNfLMkBqkYoWWMCRwzfuJk8RwF1SVEpAQ</screen>
<simpara>We now use the <literal>hd-private</literal> command to generate a hardened "account" key and a sequence of two private keys within the account:</simpara>
<screen>$ bx hd-private --hard &lt; master &gt; account
$ cat account
xprv9vkDLt81dTKjwHB8fsVB5QK8cGnzveChzSrtCfvu3aMWvQaThp59ueufuyQ8Qi3qpjk4aKsbmbfxwcgS8PYbgoR2NWHeLyvg4DhoEE68A1n

$ bx hd-private --index 0 &lt; account
xprv9xHfb6w1vX9xgZyPNXVgAhPxSsEkeRcPHEUV5iJcVEsuUEACvR3NRY3fpGhcnBiDbvG4LgndirDsia1e9F3DWPkX7Tp1V1u97HKG1FJwUpU

$ bx hd-private --index 1 &lt; account
xprv9xHfb6w1vX9xjc8XbN4GN86jzNAZ6xHEqYxzbLB4fzHFd6VqCLPGRZFsdjsuMVERadbgDbziCRJru9n6tzEWrASVpEdrZrFidt1RDfn4yA3</screen>
<simpara>Next, we use the <literal>hd-public</literal> command to generate the corresponding sequence of two public keys:</simpara>
<screen>$ bx hd-public --index 0 &lt; account
xpub6BH1zcTuktiFu43rUZ2gXqLgzu5F3tLEeTQ5t6iE3aQtM2VMTxMcyLN9fYHiGhGpQe9QQYmqL2eYPFJ3vezHz5wzaSW4FiGrseNDR4LKqTy

$ bx hd-public --index 1 &lt; account
xpub6BH1zcTuktiFx6CzhPbGjG3UYQ13WR16CmtbPiagEKpEVtpyjshWyMaMV1cn7nUPUkgQHPVXJVqsrA8xWbGQDhohEcDFTEYMvYzwRD7Juf8</screen>
<simpara>The public keys can also be derived from their corresponding private keys using the <literal>hd-to-public</literal> command:</simpara>
<screen>$ bx hd-private --index 0 &lt; account | bx hd-to-public
xpub6BH1zcTuktiFu43rUZ2gXqLgzu5F3tLEeTQ5t6iE3aQtM2VMTxMcyLN9fYHiGhGpQe9QQYmqL2eYPFJ3vezHz5wzaSW4FiGrseNDR4LKqTy

$ bx hd-private --index 1 &lt; account | bx hd-to-public
xpub6BH1zcTuktiFx6CzhPbGjG3UYQ13WR16CmtbPiagEKpEVtpyjshWyMaMV1cn7nUPUkgQHPVXJVqsrA8xWbGQDhohEcDFTEYMvYzwRD7Juf8</screen>
<simpara>We can generate a practically limitless number of keys in a deterministic chain, all derived from a single seed. This technique is used in many wallet applications to generate keys that can be backed up and restored with a single seed value. This is easier than having to back up the wallet with all its randomly generated keys every time a new key is created.</simpara>
<simpara>The seed can be encoded using the <literal>mnemonic-encode</literal> command:</simpara>
<screen>$ bx hd-mnemonic &lt; seed &gt; words
adore repeat vision worst especially veil inch woman cast recall dwell appreciate</screen>
<simpara>The seed can then be decoded using the <literal>mnemonic-decode</literal> command:</simpara>
<screen>$ bx mnemonic-decode &lt; words
eb68ee9f3df6bd4441a9feadec179ff1</screen>
<simpara>Mnemonic encoding can make the seed easier to record and even remember.<indexterm>
</indexterm></simpara>
</section>
</appendix>
</article>
