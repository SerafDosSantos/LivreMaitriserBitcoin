<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<articleinfo>
    <date>2022-03-09</date>
</articleinfo>
<section id="_présentation">
<title>Présentation</title>
<simpara><indexterm>
  <primary>&quot;blockchain (the)&quot;</primary><secondary>&quot;overview of&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;overview of&quot;</primary>
</indexterm> La structure de données de la blockchain est une liste ordonnée et reliée en retour de blocs de transactions. La blockchain peut être stockée sous forme de fichier plat ou dans une simple base de données. Le client Bitcoin Core stocke les métadonnées de la blockchain à l&#39;aide de la base de données LevelDB de Google. Les blocs sont liés &quot;en arrière&quot;, chacun se référant au bloc précédent dans la chaîne. <indexterm>
  <primary>&quot;blocks&quot;</primary><secondary>&quot;block height&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;block height&quot;</primary>
</indexterm>La blockchain est souvent visualisée comme une pile verticale, avec des blocs superposés les uns sur les autres et le premier bloc servant de base à la pile. La visualisation de blocs empilés les uns sur les autres entraîne l&#39;utilisation de termes tels que &quot;hauteur&quot; pour désigner la distance par rapport au premier bloc, et &quot;haut&quot; ou &quot;pointe&quot; pour désigner le bloc le plus récemment ajouté.</simpara>
<simpara><indexterm>
  <primary>&quot;blocs&quot;</primary><secondary>&quot;hachage de bloc&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;hachage de bloc&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;blocs&quot;</primary><secondary>&quot;bloc de genèse&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;bloc de genèse&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;blocs&quot;</primary><secondary>&quot;blocs parents&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;blocs parents&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;bloc de genèse&quot;) ))(((&quot;blocs parents&quot;</primary>
</indexterm>Chaque bloc de la blockchain est identifié par un hachage, généré à l&#39;aide de l&#39;algorithme de hachage cryptographique SHA256 sur l&#39;en-tête du bloc. Chaque bloc fait également référence à un bloc précédent, connu sous le nom de bloc <emphasis>parent</emphasis>, via le champ &quot;hachage de bloc précédent&quot; dans l&#39;en-tête de bloc. En d&#39;autres termes, chaque bloc contient le hachage de son parent dans son propre en-tête. La séquence de hachages reliant chaque bloc à son parent crée une chaîne remontant jusqu&#39;au premier bloc jamais créé, connu sous le nom de <emphasis>genesis block</emphasis>.</simpara>
<simpara>Bien qu&#39;un bloc n&#39;ait qu&#39;un seul parent, il peut temporairement avoir plusieurs enfants. Chacun des enfants fait référence au même bloc que son parent et contient le même hachage (parent) dans le champ &quot;hachage du bloc précédent&quot;. Plusieurs enfants apparaissent lors d&#39;un &quot;fork&quot; de blockchain, une situation temporaire qui se produit lorsque différents blocs sont découverts presque simultanément par différents mineurs (voir &lt;&lt;forks&gt; &gt;). Finalement, un seul bloc enfant devient une partie de la blockchain et le &quot;fork&quot; est résolu. Même si un bloc peut avoir plusieurs enfants, chaque bloc ne peut avoir qu&#39;un seul parent. En effet, un bloc a un seul champ &quot;hachage de bloc précédent&quot; faisant référence à son parent unique.</simpara>
<simpara>Le champ &quot;hachage du bloc précédent&quot; se trouve à l&#39;intérieur de l&#39;en-tête du bloc et affecte ainsi le hachage du bloc <emphasis>current</emphasis>. La propre identité de l&#39;enfant change si l&#39;identité du parent change. Lorsque le parent est modifié de quelque manière que ce soit, le hachage du parent change. Le hachage modifié du parent nécessite une modification du pointeur &quot;hachage de bloc précédent&quot; de l&#39;enfant. Cela entraîne à son tour la modification du hachage de l&#39;enfant, ce qui nécessite une modification du pointeur du petit-enfant, qui à son tour modifie le petit-enfant, et ainsi de suite. Cet effet de cascade garantit qu&#39;une fois qu&#39;un bloc est suivi de plusieurs générations, il ne peut pas être modifié sans forcer un recalcul de tous les blocs suivants. Parce qu&#39;un tel recalcul nécessiterait un calcul énorme (et donc une consommation d&#39;énergie), l&#39;existence d&#39;une longue chaîne de blocs rend immuable l&#39;historique profond de la blockchain, ce qui est une caractéristique clé de la sécurité du bitcoin.</simpara>
<simpara>Une façon de penser à la blockchain est comme des couches dans une formation géologique ou un échantillon de carotte de glacier. Les couches de surface peuvent changer avec les saisons, voire être soufflées avant d&#39;avoir le temps de s&#39;installer. Mais dès que l&#39;on descend à quelques centimètres de profondeur, les couches géologiques deviennent de plus en plus stables. Au moment où vous regardez quelques centaines de mètres plus bas, vous regardez un instantané du passé qui est resté intact pendant des millions d&#39;années. Dans la blockchain, les quelques blocs les plus récents peuvent être révisés s&#39;il y a un recalcul en chaîne dû à un fork. Les six premiers blocs sont comme quelques centimètres de terre arable. Mais une fois que vous allez plus profondément dans la blockchain, au-delà de six blocs, les blocs sont de moins en moins susceptibles de changer. <indexterm>
  <primary>&quot;transactions&quot;</primary><secondary>&quot;coinbase transactions&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;coinbase transactions&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;coinbase transactions&quot;</primary>
</indexterm>Après 100 blocs de retour, il y a tellement de stabilité que la transaction coinbase - la transaction contenant le bitcoin nouvellement extrait - peut être dépensée. Quelques milliers de blocs en arrière (un mois) et la blockchain est une histoire établie, à toutes fins pratiques. Alors que le protocole permet toujours à une chaîne d&#39;être annulée par une chaîne plus longue et alors que la possibilité qu&#39;un bloc soit inversé existe toujours, la probabilité d&#39;un tel événement diminue au fil du temps jusqu&#39;à ce qu&#39;elle devienne infinitésimale.</simpara>
</section>
<section id="_structure_d_39_un_bloc">
<title>Structure d&#39;un bloc</title>
<simpara><indexterm>
  <primary>&quot;blocs&quot;</primary><secondary>&quot;structure de&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;structure de&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;blockchain (la)&quot;</primary><secondary>&quot;structure de bloc&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;structure de bloc&quot;</primary>
</indexterm> Un bloc est une structure de données de conteneur qui agrège les transactions pour les inclure dans le grand livre public, la blockchain . Le bloc est composé d&#39;un en-tête, contenant des métadonnées, suivi d&#39;une longue liste de transactions qui constituent l&#39;essentiel de sa taille. L&#39;en-tête de bloc est de 80 octets, alors que la transaction moyenne est d&#39;au moins 400 octets et que le bloc moyen contient plus de 1900 transactions. Un bloc complet, avec toutes les transactions, est donc 10 000 fois plus grand que l&#39;en-tête du bloc. &lt;&lt;block_structure1&gt; &gt; décrit la structure d&#39;un bloc.</simpara>
<table id="block_structure1"
frame="all"
rowsep="1" colsep="1"
>
<title>La structure d&#39;un bloc</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Taille</simpara></entry>
<entry align="left" valign="top"><simpara>Champ</simpara></entry>
<entry align="left" valign="top"><simpara>La description</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>4 octets</simpara></entry>
<entry align="left" valign="top"><simpara>Taille de bloc</simpara></entry>
<entry align="left" valign="top"><simpara>La taille du bloc, en octets, suivant ce champ</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>80 octets</simpara></entry>
<entry align="left" valign="top"><simpara>En-tête de bloc</simpara></entry>
<entry align="left" valign="top"><simpara>Plusieurs champs forment l&#39;en-tête du bloc</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>1–9 octets (VarInt)</simpara></entry>
<entry align="left" valign="top"><simpara>Compteur de transactions</simpara></entry>
<entry align="left" valign="top"><simpara>Combien de transactions suivent</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>variables</simpara></entry>
<entry align="left" valign="top"><simpara>Transactions</simpara></entry>
<entry align="left" valign="top"><simpara>Les transactions enregistrées dans ce bloc</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section id="block_header">
<title>En-tête de bloc</title>
<simpara><indexterm>
  <primary>&quot;blocks&quot;</primary><secondary>&quot;headers&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;headers&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;blockchain (the)&quot;</primary><secondary>&quot;block headers&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;block headers&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;headers&quot;</primary>
</indexterm>L&#39;en-tête de bloc se compose de trois ensembles de métadonnées de bloc. Tout d&#39;abord, il y a une référence à un hachage de bloc précédent, qui connecte ce bloc au bloc précédent dans la blockchain. Le deuxième ensemble de métadonnées, à savoir <emphasis>difficulty</emphasis>, <emphasis>timestamp</emphasis> et <emphasis>nonce</emphasis>, concerne la concurrence minière, comme détaillé dans &lt;&lt;mining&gt; &gt;. La troisième métadonnée est la racine de l&#39;arbre merkle, une structure de données utilisée pour résumer efficacement toutes les transactions du bloc. &lt;&lt;block_header_structure_ch09&gt; &gt; décrit la structure d&#39;un en-tête de bloc.</simpara>
<table id="block_header_structure_ch09"
frame="all"
rowsep="1" colsep="1"
>
<title>La structure de l&#39;entête du bloc</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Taille</simpara></entry>
<entry align="left" valign="top"><simpara>Champ</simpara></entry>
<entry align="left" valign="top"><simpara>La description</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>4 octets</simpara></entry>
<entry align="left" valign="top"><simpara>Version</simpara></entry>
<entry align="left" valign="top"><simpara>Un numéro de version pour suivre les mises à niveau du logiciel/protocole</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>32 octets</simpara></entry>
<entry align="left" valign="top"><simpara>Hachage de bloc précédent</simpara></entry>
<entry align="left" valign="top"><simpara>Une référence au hachage du bloc précédent (parent) dans la chaîne</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>32 octets</simpara></entry>
<entry align="left" valign="top"><simpara>Racine de Merkel</simpara></entry>
<entry align="left" valign="top"><simpara>Un hachage de la racine de l&#39;arbre Merkle des transactions de ce bloc</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>4 octets</simpara></entry>
<entry align="left" valign="top"><simpara>Horodatage</simpara></entry>
<entry align="left" valign="top"><simpara>Le temps de création approximatif de ce bloc (en secondes écoulées depuis Unix Epoch)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>4 octets</simpara></entry>
<entry align="left" valign="top"><simpara>Cible de difficulté</simpara></entry>
<entry align="left" valign="top"><simpara>La cible de difficulté de l&#39;algorithme Proof-of-Work pour ce bloc</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>4 octets</simpara></entry>
<entry align="left" valign="top"><simpara>Nonce</simpara></entry>
<entry align="left" valign="top"><simpara>Un compteur utilisé pour l&#39;algorithme Proof-of-Work</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Le nonce, la cible de difficulté et l&#39;horodatage sont utilisés dans le processus d&#39;extraction et seront discutés plus en détail dans &lt;&lt;mining&gt; &gt;.</simpara>
</section>
<section id="block_hash">
<title>Identificateurs de bloc : hachage d&#39;en-tête de bloc et hauteur de bloc</title>
<simpara><indexterm>
  <primary>&quot;blockchain (the)&quot;</primary><secondary>&quot;block identifiers&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;block identifiers&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;blocks&quot;</primary><secondary>&quot;block height&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;block height&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;blocks&quot;</primary><secondary>&quot;block hash&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;block hash&quot;</primary>
</indexterm>L&#39;identifiant primaire d&#39;un block est son hachage cryptographique, une empreinte digitale, réalisée en hachant deux fois l&#39;en-tête du bloc via l&#39;algorithme SHA256. Le hachage de 32 octets résultant est appelé <emphasis>hachage de bloc</emphasis> mais est plus précisément le <emphasis>hachage d&#39;en-tête de bloc</emphasis>, passez :[ &lt;span role="keep-together"&gt;car seul l&#39;en-tête de bloc est utilisé pour le calculer. Par exemple,&lt;/span&gt; ] <literal>000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f</literal> est le hachage de bloc du premier bloc bitcoin jamais créé. Le hachage de bloc identifie un bloc de manière unique et sans ambiguïté et peut être dérivé indépendamment par n&#39;importe quel nœud en double hachant simplement l&#39;en-tête de bloc avec l&#39;algorithme SHA256.</simpara>
<simpara>Notez que le hachage de bloc n&#39;est pas réellement inclus dans la structure de données du bloc, ni lorsque le bloc est transmis sur le réseau, ni lorsqu&#39;il est stocké sur le stockage de persistance d&#39;un nœud dans le cadre de la blockchain. Au lieu de cela, le hachage du bloc est calculé par chaque nœud lorsque le bloc est reçu du réseau. Le hachage de bloc peut être stocké dans une table de base de données distincte dans le cadre des métadonnées du bloc, pour faciliter l&#39;indexation et une récupération plus rapide des blocs à partir du disque.</simpara>
<simpara>Une deuxième façon d&#39;identifier un bloc est par sa position dans la blockchain, appelée le  <span role="keep-together"><em>block height</em> . Le premier bloc jamais créé est à la hauteur de bloc 0 (zéro) et est le</span>   <span role="keep-together">même bloc qui était précédemment référencé par le hachage de bloc suivant</span>  <literal>000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f</literal>. Un bloc peut ainsi être identifié de deux manières : en référençant le hachage du bloc ou en référençant la hauteur du bloc. Chaque bloc suivant ajouté &quot;au-dessus&quot; de ce premier bloc est une position &quot;plus élevée&quot; dans la blockchain, comme des boîtes empilées les unes sur les autres.</simpara>
<simpara>De plus, le terme <emphasis>hauteur de bloc actuelle</emphasis> indique la taille de la blockchain en blocs à un moment donné. Par exemple, la hauteur actuelle du bloc au 1er mars 2021 était d&#39;environ 672 722, ce qui signifie qu&#39;il y avait 672 722 blocs empilés au-dessus du premier bloc créé en janvier 2009.</simpara>
<simpara>Contrairement au hachage de bloc, la hauteur de bloc n&#39;est pas un identifiant unique. Bien qu&#39;un seul bloc ait toujours une hauteur de bloc spécifique et invariante, l&#39;inverse n&#39;est pas vrai : la hauteur de bloc n&#39;identifie pas toujours un seul bloc. Deux ou plusieurs blocs peuvent avoir la même hauteur de bloc, en concurrence pour la même position dans la blockchain. Ce scénario est décrit en détail dans la section &lt;&lt;forks&gt; &gt;. La hauteur de bloc ne fait pas non plus partie de la structure de données du bloc ; il n&#39;est pas stocké dans le bloc. Chaque nœud identifie dynamiquement la position (hauteur) d&#39;un bloc dans la blockchain lorsqu&#39;il est reçu du réseau Bitcoin. La hauteur de bloc peut également être stockée sous forme de métadonnées dans une table de base de données indexée pour une récupération plus rapide.</simpara>
<informalexample>
<simpara>Le <emphasis>hachage de bloc</emphasis> d&#39;un bloc identifie toujours un seul bloc de manière unique. Un bloc a également toujours une <emphasis>hauteur de bloc</emphasis> spécifique. Cependant, il n&#39;est pas toujours vrai qu&#39;une hauteur de bloc spécifique puisse identifier un seul bloc. Au contraire, deux blocs ou plus pourraient se disputer une seule position dans la blockchain.</simpara>
</informalexample>
</section>
<section id="_le_bloc_genesis">
<title>Le bloc Genesis</title>
<simpara><indexterm>
  <primary>&quot;blocks&quot;</primary><secondary>&quot;genesis block&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;genesis block&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;blockchain (the)&quot;</primary><secondary>&quot;genesis block&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;genesis block&quot;</primary>
</indexterm> Le premier bloc de la blockchain est appelé le bloc genesis et a été créé en 2009. Il est l&#39;ancêtre commun de tous les blocs de la blockchain, ce qui signifie que si vous commencez à n&#39;importe quel bloc et suivez la chaîne en arrière dans le temps, vous finirez par arriver au bloc de genèse.</simpara>
<simpara>Chaque nœud commence toujours par une blockchain d&#39;au moins un bloc car le bloc de genèse est encodé de manière statique dans le logiciel client Bitcoin, de sorte qu&#39;il ne peut pas être modifié. Chaque nœud &quot;connaît&quot; toujours le hachage et la structure du bloc de genèse, l&#39;heure fixe à laquelle il a été créé et même la transaction unique qu&#39;il contient. Ainsi, chaque nœud a le point de départ de la blockchain, une &quot;racine&quot; sécurisée à partir de laquelle construire une blockchain de confiance.</simpara>
<simpara>Voir le bloc de genèse encodé statiquement à l&#39;intérieur du client Bitcoin Core, dans <ulink url="https://bit.ly/1x6rcwP"><emphasis>chainparams.cpp</emphasis></ulink>.</simpara>
<simpara>Le hachage d&#39;identifiant suivant appartient au bloc genesis :</simpara>
<screen>000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f</screen>
<simpara>Vous pouvez rechercher ce hachage de bloc sur n&#39;importe quel site Web d&#39;explorateur de blocs, tel que <emphasis>Blockchain.com</emphasis>, et vous trouverez une page décrivant le contenu de ce bloc, avec une URL contenant ce hachage :</simpara>
<simpara><ulink url="https://www.blockchain.com/btc/block/000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f">https://www.blockchain.com/btc/block/000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f</ulink></simpara>
<simpara>Utilisation du client de référence Bitcoin Core sur la ligne de commande :</simpara>
<screen>$ bitcoin-cli getblock 000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f</screen>
<programlisting language="json" linenumbering="unnumbered">{
    &amp;quot;hachage&amp;quot; : &amp;quot;000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f&amp;quot;,
    &amp;quot;confirmations&amp;quot; : 308321,
    &amp;quot;taille&amp;quot; : 285,
    &amp;quot;hauteur&amp;quot; : 0,
    &amp;quot;version 1,
    &amp;quot;merkleroot&amp;quot; : &amp;quot;4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b&amp;quot;,
    &amp;quot;tx&amp;quot; : [
        &amp;quot;4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b&amp;quot;
    ],
    &amp;quot;heure&amp;quot; : 1231006505,
    &amp;quot;nonce&amp;quot; : 2083236893,
    &amp;quot;bits&amp;quot; : &amp;quot;1d00ffff&amp;quot;,
    &amp;quot;difficulté&amp;quot; : 1.00000000,
    &amp;quot;nextblockhash&amp;quot; : &amp;quot;00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048&amp;quot;
}</programlisting>
<simpara>Le bloc de genèse contient un message caché en son sein. L&#39;entrée de transaction coinbase contient le texte &quot;Le chancelier du Times 03/Jan/2009 au bord d&#39;un deuxième plan de sauvetage pour les banques&quot;. Ce message était destiné à offrir une preuve de la date la plus ancienne de création de ce bloc, en faisant référence au titre du journal britannique <emphasis>The Times</emphasis>. Il sert également de rappel ironique de l&#39;importance d&#39;un système monétaire indépendant, le lancement du bitcoin se produisant en même temps qu&#39;une crise monétaire mondiale sans précédent. Le message a été intégré dans le premier bloc par Satoshi Nakamoto, le créateur de Bitcoin.</simpara>
</section>
<section id="_relier_les_blocs_dans_la_blockchain">
<title>Relier les blocs dans la Blockchain</title>
<simpara><indexterm>
  <primary>&quot;blocs&quot;</primary><secondary>&quot;blocs de liaison dans la blockchain&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;blocs de liaison dans la blockchain&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;blockchain (la)&quot;</primary><secondary>&quot;blocs de liaison dans la blockchain&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;blocs de liaison dans la blockchain&quot;</primary>
</indexterm>Les nœuds complets Bitcoin conservent une copie locale de la blockchain, à partir de le bloc de genèse. La copie locale de la blockchain est constamment mise à jour au fur et à mesure que de nouveaux blocs sont trouvés et utilisés pour étendre la chaîne. Lorsqu&#39;un nœud reçoit des blocs entrants du réseau, il validera ces blocs, puis les reliera à la blockchain existante. Pour établir un lien, un nœud examinera l&#39;en-tête de bloc entrant et recherchera le &quot;hachage de bloc précédent&quot;.</simpara>
<simpara>Supposons, par exemple, qu&#39;un nœud ait 277 314 blocs dans la copie locale de la blockchain. Le dernier bloc dont le nœud a connaissance est le bloc 277 314, avec un hachage d&#39;en-tête de bloc :</simpara>
<screen>00000000000000027e7ba6fe7bad39faf3b5a83daed765f05f7d1b71a1632249</screen>
<simpara>Le nœud Bitcoin reçoit alors un nouveau bloc du réseau, qu&#39;il parse comme suit :</simpara>
<programlisting language="json" linenumbering="unnumbered">{
    &amp;quot;taille&amp;quot; : 43560,
    &amp;quot;version 2,
    &amp;quot;précédentblockhash&amp;quot; :
        &amp;quot;00000000000000027e7ba6fe7bad39faf3b5a83daed765f05f7d1b71a1632249&amp;quot;,
    &amp;quot;merkleroot&amp;quot; :
        &amp;quot;5e049f4030e0ab2debb92378f53c0a6e09548aea083f3ab25e1d94ea1155e29d&amp;quot;,
    &amp;quot;heure&amp;quot; : 1388185038,
    &amp;quot;difficulté&amp;quot; : 1180923195.25802612,
    &amp;quot;nonce&amp;quot; : 4215469401,
    &amp;quot;tx&amp;quot; : [
        &amp;quot;257e7497fb8bc68421eb2c7b699dbab234831600e7352f0d9e6522c7cf3f6c77&amp;quot;,

 #[... beaucoup plus de transactions omises ...]

        &amp;quot;05cfd38f6ae6aa83674cc99e4d75a1458c165b7ab84725eda41d018a09176634&amp;quot;
    ]
}</programlisting>
<simpara>En regardant ce nouveau bloc, le nœud trouve le champ <literal>previousblockhash</literal>, qui contient le hachage de son bloc parent. Il s&#39;agit d&#39;un hachage connu du nœud, celui du dernier bloc de la chaîne à la hauteur 277,314. Par conséquent, ce nouveau bloc est un enfant du dernier bloc de la chaîne et étend la blockchain existante. Le nœud ajoute ce nouveau bloc à la fin de la chaîne, rendant la blockchain plus longue avec une nouvelle hauteur de 277 315. &lt;&lt;chain_of_blocks&gt; &gt; montre la chaîne de trois blocs, liés par des références dans le champ <literal>previousblockhash</literal>.</simpara>
</section>
<section id="merkle_trees">
<title>Arbres Merkel</title>
<simpara><indexterm>
  <primary>&quot;merkle trees&quot;</primary><secondary>id=&quot;merkle09&quot;</secondary>
</indexterm>
<indexterm>
  <primary>id=&quot;merkle09&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;blockchain (the)&quot;</primary><secondary>&quot;merkle trees&quot;</secondary><tertiary>id=&quot;BCTmerkle09&quot;</tertiary>
</indexterm>
<indexterm>
  <primary>&quot;merkle trees&quot;</primary><secondary>id=&quot;BCTmerkle09&quot;</secondary>
</indexterm>
<indexterm>
  <primary>id=&quot;BCTmerkle09&quot;</primary>
</indexterm>Chaque bloc de la blockchain Bitcoin contient un résumé de tous les transactions dans le bloc à l&#39;aide d&#39;un <emphasis>merkle tree</emphasis>.</simpara>
<simpara><indexterm>
  <primary>&quot;arbres de hachage binaires&quot;</primary><secondary>voir=&quot;arbres merkle&quot;</secondary>
</indexterm>
<indexterm>
  <primary>voir=&quot;arbres merkle&quot;</primary>
</indexterm>Un <emphasis>arbre merkle</emphasis>, également appelé <emphasis>arbre de hachage binaire</emphasis>, est une structure de données utilisée pour résumer et vérifier efficacement l&#39;intégrité de grands ensembles de données. Les arbres Merkle sont des arbres binaires contenant des hachages cryptographiques. Le terme &quot;arbre&quot; est utilisé en informatique pour décrire une structure de données ramifiée, mais ces arbres sont généralement affichés à l&#39;envers avec la &quot;racine&quot; en haut et les &quot;feuilles&quot; en bas d&#39;un diagramme, comme vous le verrez dans les exemples qui suivent.</simpara>
<figure id="chaîne_de_blocs"><title>Blocs liés dans une chaîne par référence au hachage d&#39;en-tête de bloc précédent</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_0901.png"/>
  </imageobject>
  <textobject><phrase>rôle=&quot;smallerfourtyfive&quot;</phrase></textobject>
</mediaobject>
</figure>
<simpara>Les arbres Merkle sont utilisés dans Bitcoin pour résumer toutes les transactions d&#39;un bloc, produisant une empreinte numérique globale de l&#39;ensemble des transactions, fournissant un processus très efficace pour vérifier si une transaction est incluse dans un bloc. Un arbre Merkle est construit en hachant récursivement des paires de nœuds jusqu&#39;à ce qu&#39;il n&#39;y ait qu&#39;un seul hachage, appelé <emphasis>root</emphasis>, ou <emphasis>merkle root</emphasis>. L&#39;algorithme de hachage cryptographique utilisé dans les arbres Merkle de Bitcoin est SHA256 appliqué deux fois, également connu sous le nom de double-SHA256.</simpara>
<simpara>Lorsque N éléments de données sont hachés et résumés dans un arbre Merkle, vous pouvez vérifier si un élément de données est inclus dans l&#39;arbre avec au plus <literal>2*log<subscript>2</subscript>(N)</literal> calculs, ce qui en fait une donnée très efficace structure.</simpara>
<simpara>L&#39;arbre de Merkle est construit de bas en haut. Dans l&#39;exemple suivant, nous commençons avec quatre transactions, A, B, C et D, qui forment les <emphasis>feuilles</emphasis> de l&#39;arbre Merkle, comme indiqué dans &lt;&lt;simple_merkle&gt; &gt;. Les transactions ne sont pas stockées dans l&#39;arborescence Merkle ; à la place, leurs données sont hachées et le hachage résultant est stocké dans chaque nœud feuille sous la forme H<subscript>A</subscript>, H<subscript>B</subscript>, H<subscript>C</subscript> et H<subscript>D</subscript> :</simpara>
<pre data-type="codelisting">
H <sub>A</sub> = SHA256(SHA256(Transaction A))
</pre>
<simpara>Des paires consécutives de nœuds feuilles sont ensuite résumées dans un nœud parent, en concaténant les deux hachages et en les hachant ensemble. Par exemple, pour construire le nœud parent H<subscript>AB</subscript>, les deux hachages de 32 octets des enfants sont concaténés pour créer une chaîne de 64 octets. Cette chaîne est ensuite doublement hachée pour produire le hachage du nœud parent :</simpara>
<pre data-type="codelisting">
H <sub>AB</sub> = SHA256(SHA256(H <sub>A</sub> + H <sub>B</sub> ))
</pre>
<simpara>Le processus se poursuit jusqu&#39;à ce qu&#39;il n&#39;y ait qu&#39;un seul nœud au sommet, le nœud connu sous le nom de racine merkle. Ce hachage de 32 octets est stocké dans l&#39;en-tête du bloc et résume toutes les données des quatre transactions. &lt;&lt;simple_merkle&gt; &gt; montre comment la racine est calculée par hachages par paires des nœuds.</simpara>
<figure id="simple_merkle"><title>Calcul des nœuds dans un arbre de Merkle</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_0902.png"/>
  </imageobject>
  <textobject><phrase>&quot;merkle_tree&quot;</phrase></textobject>
</mediaobject>
</figure>
<simpara><indexterm>
  <primary>&quot;arbres équilibrés&quot;</primary>
</indexterm>Parce que l&#39;arbre de Merkle est un arbre binaire, il a besoin d&#39;un nombre pair de nœuds feuilles. S&#39;il y a un nombre impair de transactions à résumer, le dernier hachage de transaction sera dupliqué pour créer un nombre pair de nœuds feuilles, également appelés <emphasis>arbre équilibré</emphasis>. Ceci est montré dans &lt;&lt;merkle_tree_odd&gt; &gt;, où la transaction C est dupliquée.</simpara>
<figure id="merkle_tree_odd"><title>La duplication d&#39;un élément de données permet d&#39;obtenir un nombre pair d&#39;éléments de données</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_0903.png"/>
  </imageobject>
  <textobject><phrase>&quot;merkle_tree_odd&quot;</phrase></textobject>
</mediaobject>
</figure>
<simpara>La même méthode de construction d&#39;un arbre à partir de quatre transactions peut être généralisée pour construire des arbres de n&#39;importe quelle taille. Dans le bitcoin, il est courant d&#39;avoir plusieurs centaines à plus d&#39;un millier de transactions dans un seul bloc, qui sont résumées exactement de la même manière, produisant seulement 32 octets de données en tant que racine merkle unique. Dans &lt;&lt;merkle_tree_large&gt; &gt;, vous verrez un arbre construit à partir de 16 transactions. Notez que bien que la racine semble plus grande que les nœuds feuilles dans le diagramme, elle a exactement la même taille, seulement 32 octets. Qu&#39;il y ait une transaction ou cent mille transactions dans le bloc, la racine merkle les résume toujours en 32 octets.</simpara>
<simpara><indexterm>
  <primary>&quot;chemins d&#39;authentification&quot;</primary>
</indexterm>Pour prouver qu&#39;une transaction spécifique est incluse dans un bloc, un nœud n&#39;a besoin que de produire <literal>log<subscript>2</subscript>(N)</literal> hachages de 32 octets, constituant un <emphasis>chemin d&#39;authentification</emphasis> ou <emphasis>chemin merkle</emphasis> se connectant la transaction spécifique à la racine de l&#39;arborescence. Ceci est particulièrement important lorsque le nombre de transactions augmente, car le logarithme en base 2 du nombre de transactions augmente beaucoup plus lentement. Cela permet aux nœuds Bitcoin de produire efficacement des chemins de 10 ou 12 hachages (320 à 384 octets), qui peuvent fournir la preuve d&#39;une seule transaction parmi plus de mille transactions dans un bloc de la taille d&#39;un mégaoctet.</simpara>
<figure id="merkle_tree_large"><title>Un arbre Merkle résumant de nombreux éléments de données</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_0904.png"/>
  </imageobject>
  <textobject><phrase>&quot;merkle_tree_large&quot;</phrase></textobject>
</mediaobject>
</figure>
<simpara>Dans &lt;&lt;merkle_tree_path&gt; &gt;, un nœud peut prouver qu&#39;une transaction K est incluse dans le bloc en produisant un chemin merkle qui ne fait que quatre hachages de 32 octets (128 octets au total). Le chemin se compose des quatre hachages (affichés avec un arrière-plan ombré dans &lt;&lt;merkle_tree_path&gt; &gt;) H<subscript>L</subscript>, H<subscript>IJ</subscript>, H<subscript>MNOP</subscript> et H<subscript>ABCDEFGH</subscript>. Avec ces quatre hachages fournis comme chemin d&#39;authentification, n&#39;importe quel nœud peut prouver que H<subscript>K</subscript> (avec un fond noir au bas du diagramme) est inclus dans la racine merkle en calculant quatre hachages supplémentaires par paires H<subscript>KL</subscript>, H<subscript>IJKL</subscript>, H<subscript>IJKLMNOP</subscript> et la racine de l&#39;arbre merkle (indiquée par une ligne pointillée dans le diagramme).</simpara>
<figure id="merkle_tree_path"><title>Un chemin merkle utilisé pour prouver l&#39;inclusion d&#39;un élément de données</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_0905.png"/>
  </imageobject>
  <textobject><phrase>&quot;merkle_tree_path&quot;</phrase></textobject>
</mediaobject>
</figure>
<simpara>Le code dans &lt;&lt;merkle_example&gt; &gt; illustre le processus de création d&#39;un arbre Merkle depuis les hachages de nœud feuille jusqu&#39;à la racine, en utilisant la bibliothèque libbitcoin pour certaines fonctions d&#39;assistance.</simpara>
<example id="merkle_example">
<title>Construire un arbre Merkle</title>
<programlisting language="cpp" linenumbering="unnumbered">inclure::code/merkle.cpp[]</programlisting>
</example>
<simpara>&lt;&lt;merkle_example_run&gt; &gt; montre le résultat de la compilation et de l&#39;exécution du code merkle.</simpara>
<example id="merkle_example_run">
<title>Compilation et exécution de l&#39;exemple de code merkle</title>
<programlisting language="bash" linenumbering="unnumbered"># Compiler le code merkle.cpp
$ g++ -o merkle merkle.cpp $(pkg-config --cflags --libs libbitcoin)
# Exécutez l&amp;#39;exécutable merkle
$ ./merkle
Liste de hachage Merkle actuelle :
  32650049a0418e4380db0af81788635d8b65424d397170b8499cdc28c4d27006
  30861db96905c8dc8b99398ca1cd5bd5b84ac3264a4e1b3e65afa1bcee7540c4

Liste de hachage Merkle actuelle :
  d47780c084bad3830bcdaf6eace035e4c6cbf646d103795d22104fb105014ba3

Résultat : d47780c084bad3830bcdaf6eace035e4c6cbf646d103795d22104fb105014ba3</programlisting>
</example>
<simpara>L&#39;efficacité des arbres Merkle devient évidente à mesure que l&#39;échelle augmente. &lt;&lt;block_structure2&gt; &gt; montre la quantité de données qui doit être échangée sous forme de chemin Merkle pour prouver qu&#39;une transaction fait partie d&#39;un bloc.</simpara>
<table id="block_structure2"
frame="all"
rowsep="1" colsep="1"
>
<title>Efficacité de l&#39;arbre Merkle</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<colspec colname="col_4" colwidth="25*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Nombre de transactions</simpara></entry>
<entry align="left" valign="top"><simpara>Environ. taille du bloc</simpara></entry>
<entry align="left" valign="top"><simpara>Taille du chemin (hachages)</simpara></entry>
<entry align="left" valign="top"><simpara>Taille du chemin (octets)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>16 opérations</simpara></entry>
<entry align="left" valign="top"><simpara>4 kilo-octets</simpara></entry>
<entry align="left" valign="top"><simpara>4 hachages</simpara></entry>
<entry align="left" valign="top"><simpara>128 octets</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>512 opérations</simpara></entry>
<entry align="left" valign="top"><simpara>128 kilo-octets</simpara></entry>
<entry align="left" valign="top"><simpara>9 hachages</simpara></entry>
<entry align="left" valign="top"><simpara>288 octets</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>2048 opérations</simpara></entry>
<entry align="left" valign="top"><simpara>512 kilo-octets</simpara></entry>
<entry align="left" valign="top"><simpara>11 hachages</simpara></entry>
<entry align="left" valign="top"><simpara>352 octets</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>65 535 opérations</simpara></entry>
<entry align="left" valign="top"><simpara>16 mégaoctets</simpara></entry>
<entry align="left" valign="top"><simpara>16 hachages</simpara></entry>
<entry align="left" valign="top"><simpara>512 octets</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Comme vous pouvez le voir dans le tableau, alors que la taille de bloc augmente rapidement, de 4 Ko avec 16 transactions à une taille de bloc de 16 Mo pour 65 535 transactions, le chemin merkle requis pour prouver l&#39;inclusion d&#39;une transaction augmente beaucoup plus lentement, de 128 octets à seulement 512 octets. Avec les arbres Merkle, un nœud peut télécharger uniquement les en-têtes de bloc (80 octets par bloc) et être toujours en mesure d&#39;identifier l&#39;inclusion d&#39;une transaction dans un bloc en récupérant un petit chemin Merkle à partir d&#39;un nœud complet, sans stocker ni transmettre la grande majorité des blockchain, qui peut avoir une taille de plusieurs gigaoctets. Les nœuds qui ne maintiennent pas une blockchain complète, appelés nœuds de vérification simplifiée des paiements (SPV), utilisent des chemins Merkle pour vérifier les transactions sans télécharger des blocs complets.</simpara>
</section>
<section id="_merkle_trees_et_vérification_simplifiée_des_paiements_spv">
<title>Merkle Trees et vérification simplifiée des paiements (SPV)</title>
<simpara><indexterm>
  <primary>&quot;Simplified-payment-verification (SPV)&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;Bitcoin nodes&quot;</primary><secondary>&quot;SPV nodes&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;SPV nodes&quot;</primary>
</indexterm>Les arbres Merkle sont largement utilisés par les nœuds SPV. Les nœuds SPV n&#39;ont pas toutes les transactions et ne téléchargent pas les blocs complets, juste les en-têtes de bloc. Afin de vérifier qu&#39;une transaction est incluse dans un bloc, sans avoir à télécharger toutes les transactions du bloc, ils utilisent un chemin d&#39;authentification, ou chemin merkle.</simpara>
<simpara>Considérons, par exemple, un nœud SPV qui est intéressé par les paiements entrants à une adresse contenue dans son portefeuille. Le nœud SPV établira un filtre bloom (voir &lt;&lt;bloom_filters&gt; &gt;) sur ses connexions à des pairs pour limiter les transactions reçues uniquement à celles contenant des adresses d&#39;intérêt. Lorsqu&#39;un pair voit une transaction qui correspond au filtre bloom, il enverra ce bloc à l&#39;aide d&#39;un message <literal>merkleblock</literal>. Le message <literal>merkleblock</literal> contient l&#39;en-tête du bloc ainsi qu&#39;un chemin merkle qui relie la transaction d&#39;intérêt à la racine merkle dans le bloc. Le nœud SPV peut utiliser ce chemin Merkle pour connecter la transaction au bloc et vérifier que la transaction est incluse dans le bloc. Le nœud SPV utilise également l&#39;en-tête de bloc pour lier le bloc au reste de la blockchain. La combinaison de ces deux liens, entre la transaction et le bloc, et entre le bloc et la blockchain, prouve que la transaction est enregistrée dans la blockchain. Au total, le nœud SPV aura reçu moins d&#39;un kilo-octet de données pour l&#39;en-tête de bloc et le chemin merkle, une quantité de données plus de mille fois inférieure à un bloc complet (environ 1 mégaoctet actuellement).<indexterm>
  <primary>&quot;&quot;</primary><secondary>startref=&quot;BCTmerkle09&quot;</secondary>
</indexterm>
<indexterm>
  <primary>startref=&quot;BCTmerkle09&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;&quot;</primary><secondary>startref=&quot;merkle09&quot;</secondary>
</indexterm>
<indexterm>
  <primary>startref=&quot;merkle09&quot;</primary>
</indexterm></simpara>
</section>
<section id="_blockchains_de_test_de_bitcoin">
<title>Blockchains de test de Bitcoin</title>
<simpara><indexterm>
  <primary>&quot;blockchain (the)&quot;</primary><secondary>&quot;test blockchains&quot;</secondary><tertiary>id=&quot;BCTtest09&quot;</tertiary>
</indexterm>
<indexterm>
  <primary>&quot;test blockchains&quot;</primary><secondary>id=&quot;BCTtest09&quot;</secondary>
</indexterm>
<indexterm>
  <primary>id=&quot;BCTtest09&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;mainnet&quot;</primary><secondary>seealso=&quot;blockchain (the)&quot;</secondary>
</indexterm>
<indexterm>
  <primary>seealso=&quot;blockchain (the)&quot;</primary>
</indexterm>Vous pourriez être surpris d&#39;apprendre qu&#39;il existe plus d&#39;une blockchain Bitcoin. La blockchain Bitcoin &quot;principale&quot;, celle créée par Satoshi Nakamoto le 3 janvier 2009, celle avec le bloc genesis que nous avons étudié dans ce chapitre, s&#39;appelle <emphasis>mainnet</emphasis>. Il existe d&#39;autres blockchains Bitcoin qui sont utilisées à des fins de test : actuellement <emphasis>testnet</emphasis>, <emphasis>segnet</emphasis> et <emphasis>regtest</emphasis>. Regardons chacun à son tour.<indexterm>
  <primary>&quot;testnet&quot;</primary><secondary>id=&quot;testnet09&quot;</secondary>
</indexterm>
<indexterm>
  <primary>id=&quot;testnet09&quot;</primary>
</indexterm></simpara>
<section id="_testnet_le_terrain_de_test_de_bitcoin">
<title>Testnet—Le terrain de test de Bitcoin</title>
<simpara>Testnet est le nom de la blockchain, du réseau et de la devise de test utilisés à des fins de test. Le testnet est un réseau P2P en direct complet, avec des portefeuilles, des bitcoins de test (pièces de testnet), l&#39;exploitation minière et toutes les autres fonctionnalités du réseau principal. Il n&#39;y a vraiment que deux différences : les pièces testnet sont censées être sans valeur et la difficulté d&#39;extraction doit être suffisamment faible pour que n&#39;importe qui puisse extraire des pièces testnet relativement facilement (en les gardant sans valeur).</simpara>
<simpara>Tout développement logiciel destiné à une utilisation en production sur le réseau principal de Bitcoin doit d&#39;abord être testé sur testnet avec des pièces de test. Cela protège à la fois les développeurs des pertes financières dues aux bogues et le réseau des comportements involontaires dus aux bogues.</simpara>
<simpara>Garder les pièces sans valeur et l&#39;exploitation minière facile, cependant, n&#39;est pas facile. Malgré les appels des développeurs, certaines personnes utilisent des équipements de minage avancés (GPU et ASIC) pour miner sur testnet. Cela augmente la difficulté, rend impossible l&#39;extraction avec un processeur et rend finalement assez difficile l&#39;obtention de pièces de test pour que les gens commencent à les évaluer, de sorte qu&#39;elles ne sont pas sans valeur. En conséquence, de temps en temps, le testnet doit être supprimé et redémarré à partir d&#39;un nouveau bloc de genèse, réinitialisant la difficulté.</simpara>
<simpara>Le testnet actuel s&#39;appelle <emphasis>testnet3</emphasis>, la troisième itération de testnet, redémarré en février 2011 pour réinitialiser la difficulté du testnet précédent.</simpara>
<simpara>Gardez à l&#39;esprit que testnet3 est une grande blockchain, dépassant 25 Go en 2021. Il faudra environ un jour pour se synchroniser complètement et utiliser les ressources de votre ordinateur. Pas autant que le réseau principal, mais pas exactement &quot;léger&quot; non plus. Une bonne façon d&#39;exécuter un nœud testnet est d&#39;utiliser une image de machine virtuelle (par exemple, VirtualBox, Docker, Cloud Server, etc.) dédiée à cet effet.</simpara>
<section id="_utiliser_testnet">
<title>Utiliser testnet</title>
<simpara>Bitcoin Core, comme presque tous les autres logiciels bitcoin, prend entièrement en charge le fonctionnement sur testnet au lieu du réseau principal. Toutes les fonctions de Bitcoin Core fonctionnent sur testnet, y compris le portefeuille, l&#39;extraction de pièces testnet et la synchronisation d&#39;un nœud testnet complet.</simpara>
<simpara>Pour démarrer Bitcoin Core sur testnet au lieu du réseau principal, vous utilisez le commutateur <literal>testnet</literal> :</simpara>
<screen>$ bitcoind-testnet</screen>
<simpara>Dans les journaux, vous devriez voir que bitcoind construit une nouvelle blockchain dans le sous-répertoire <literal>testnet3</literal> du répertoire bitcoind par défaut :</simpara>
<screen>bitcoind : Utilisation du répertoire de données /home/username/.bitcoin/testnet3</screen>
<simpara>Pour vous connecter à bitcoind, vous utilisez l&#39;outil de ligne de commande <literal>bitcoin-cli</literal>, mais vous devez également le passer en mode testnet :</simpara>
<screen>$ bitcoin-cli -testnet getblockchaininfo
{
  &amp;quot;chaîne&amp;quot;: &amp;quot;tester&amp;quot;,
  &amp;quot;blocs&amp;quot;: 1088,
  &amp;quot;en-têtes&amp;quot;: 139999,
  &amp;quot;bestblockhash&amp;quot;: &amp;quot;0000000063d29909d475a1c4ba26da64b368e56cce5d925097bf3a2084370128&amp;quot;,
  &amp;quot;difficulté&amp;quot;: 1,
  &amp;quot;temps médian&amp;quot;: 1337966158,
  &amp;quot;progression de vérification&amp;quot;: 0.001644065914099759,
  &amp;quot;chaîne&amp;quot;: &amp;quot;000000000000000000000000000000000000000000000000044104410441&amp;quot;,
  &amp;quot;élagué&amp;quot;: faux,
  &amp;quot;softfork&amp;quot;: [

  [...]</screen>
<simpara>Vous pouvez également exécuter sur testnet3 avec d&#39;autres implémentations de nœud complet, telles que <literal>btcd</literal> (écrit en Go) et <literal>bcoin</literal> (écrit en JavaScript), pour expérimenter et apprendre dans d&#39;autres langages et frameworks de programmation.</simpara>
<simpara>En 2021, testnet3 prend en charge toutes les fonctionnalités du réseau principal, y compris Segregated Witness (voir &lt;&lt;segwit&gt; &gt;). Par conséquent, testnet3 peut également être utilisé pour tester les fonctionnalités de témoin séparé.<indexterm>
  <primary>&quot;&quot;</primary><secondary>startref=&quot;testnet09&quot;</secondary>
</indexterm>
<indexterm>
  <primary>startref=&quot;testnet09&quot;</primary>
</indexterm></simpara>
</section>
</section>
<section id="_segnet_le_réseau_de_test_des_témoins_séparés">
<title>Segnet—Le réseau de test des témoins séparés</title>
<simpara><indexterm>
  <primary>&quot;segnet&quot;</primary>
</indexterm>En 2016, un testnet à usage spécial a été lancé pour aider au développement et aux tests de Segregated Witness (alias segwit; voir &lt;&lt;segwit&gt; &gt;). Cette blockchain de test s&#39;appelle <literal>segnet</literal> et peut être rejointe en exécutant une version spéciale (branche) de Bitcoin Core.</simpara>
<simpara><indexterm>
  <primary>&quot;segwit (Segregated Witness)&quot;</primary>
</indexterm>Depuis que segwit a été ajouté à testnet3, il n&#39;est plus nécessaire d&#39;utiliser segnet pour tester les fonctionnalités de segwit.</simpara>
<simpara>À l&#39;avenir, il est probable que nous verrons d&#39;autres chaînes de blocs testnet spécialement conçues pour tester une seule fonctionnalité ou un changement architectural majeur, comme segnet.</simpara>
</section>
<section id="_regtest_la_blockchain_locale">
<title>Regtest—La Blockchain Locale</title>
<simpara><indexterm>
  <primary>&quot;regtest (Regression Testing)&quot;</primary>
</indexterm>Regtest, qui signifie &quot;Regression Testing&quot;, est une fonctionnalité de Bitcoin Core qui vous permet de créer une blockchain locale à des fins de test. Contrairement à testnet3, qui est une blockchain de test publique et partagée, les blockchains regtest sont destinées à être exécutées comme des systèmes fermés pour les tests locaux. Vous lancez une blockchain regtest à partir de zéro, en créant un bloc de genèse local. Vous pouvez ajouter d&#39;autres nœuds au réseau ou l&#39;exécuter avec un seul nœud uniquement pour tester le logiciel Bitcoin Core.</simpara>
<simpara>Pour démarrer Bitcoin Core en mode regtest, vous utilisez le drapeau <literal>regtest</literal> :</simpara>
<screen>$ bitcoind-regtest</screen>
<simpara>Tout comme avec testnet, Bitcoin Core initialisera une nouvelle blockchain sous le sous-répertoire <emphasis>regtest</emphasis> de votre répertoire par défaut bitcoind :</simpara>
<screen>bitcoind : Utilisation du répertoire de données /home/nom d&amp;#39;utilisateur/.bitcoin/regtest</screen>
<simpara>Pour utiliser l&#39;outil de ligne de commande, vous devez également spécifier l&#39;indicateur <literal>regtest</literal>. Essayons la commande <literal>getblockchaininfo</literal> pour inspecter la blockchain regtest :</simpara>
<screen>$ bitcoin-cli -regtest getblockchaininfo
{
  &amp;quot;chaîne&amp;quot;: &amp;quot;regtester&amp;quot;,
  &amp;quot;blocs&amp;quot;: 0,
  &amp;quot;en-têtes&amp;quot;: 0,
  &amp;quot;bestblockhash&amp;quot;: &amp;quot;0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206&amp;quot;,
  &amp;quot;difficulté&amp;quot;: 4.656542373906925e-10,
  &amp;quot;temps médian&amp;quot;: 1296688602,
  &amp;quot;progrès de vérification&amp;quot;: 1,
  &amp;quot;chaîne&amp;quot;: &amp;quot;000000000000000000000000000000000000000000000000000000000002&amp;quot;,
  &amp;quot;élagué&amp;quot;: faux,
  [...]</screen>
<simpara>Comme vous pouvez le voir, il n&#39;y a pas encore de blocs. Exploitons-en quelques-uns (500 blocs) et gagnons la récompense :</simpara>
<screen>$ bitcoin-cli -regtest génère 500
[
  &amp;quot;7afed70259f22c2bf11e406cb12ed5c0657b6e16a6477a9f8b28e2046b5ba1ca&amp;quot;,
  &amp;quot;1aca2f154a80a9863a9aac4c72047a6d3f385c4eec5441a4aafa6acaa1dada14&amp;quot;,
  &amp;quot;4334ecf6fb022f30fbd764c3ee778fabbd53b4a4d1950eae8a91f1f5158ed2d1&amp;quot;,
  &amp;quot;5f951d34065efeaf64e54e91d00b260294fcdfc7f05dbb5599aec84b957a7766&amp;quot;,
  &amp;quot;43744b5e77c1dfece9d05ab5f0e6796ebe627303163547e69e27f55d0f2b9353&amp;quot;,
   [...]
  &amp;quot;6c31585a48d4fc2b3fd25521f4515b18aefb59d0def82bd9c2185c4ecb754327&amp;quot;
]</screen>
<simpara>Cela ne prendra que quelques secondes pour miner tous ces blocs, ce qui facilite certainement les tests. Si vous vérifiez le solde de votre portefeuille, vous verrez que vous avez gagné une récompense pour les 400 premiers blocs (les récompenses coinbase doivent avoir une profondeur de 100 blocs avant que vous puissiez les dépenser) :</simpara>
<screen>$ bitcoin-cli -regtest getbalance
12462.50000000</screen>
</section>
</section>
<section id="_utiliser_des_chaînes_de_blocs_de_test_pour_le_développement">
<title>Utiliser des chaînes de blocs de test pour le développement</title>
<simpara><indexterm>
  <primary>&quot;environnement de développement&quot;</primary><secondary>&quot;tester les blockchains et&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;tester les blockchains et&quot;</primary>
</indexterm>Les différentes blockchains de Bitcoin (<literal>regtest</literal>, <literal>segnet</literal>, <literal>testnet3</literal>, <literal>mainnet</literal>) offrent une gamme d&#39;environnements de test pour le développement de bitcoin. Utilisez les chaînes de blocs de test, que vous développiez pour Bitcoin Core ou un autre client de consensus à nœud complet ; une application telle qu&#39;un portefeuille, un échange, un site de commerce électronique ; ou même développer de nouveaux contrats intelligents et des scripts complexes.</simpara>
<simpara>Vous pouvez utiliser les blockchains de test pour établir un pipeline de développement. Testez votre code localement sur un <literal>regtest</literal> au fur et à mesure que vous le développez. Une fois que vous êtes prêt à l&#39;essayer sur un réseau public, passez à <literal>testnet</literal> pour exposer votre code à un environnement plus dynamique avec plus de diversité de code et d&#39;applications. Enfin, une fois que vous êtes sûr que votre code fonctionne comme prévu, passez à <literal>mainnet</literal> pour le déployer en production. Au fur et à mesure que vous apportez des modifications, des améliorations, des corrections de bogues, etc., redémarrez le pipeline, en déployant d&#39;abord chaque modification sur <literal>regtest</literal>, puis sur <literal>testnet</literal>, et enfin en production.<indexterm>
  <primary>&quot;&quot;</primary><secondary>startref=&quot;BCTtest09&quot;</secondary>
</indexterm>
<indexterm>
  <primary>startref=&quot;BCTtest09&quot;</primary>
</indexterm></simpara>
</section>
</article>
