<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<articleinfo>
    <date>2022-03-17</date>
</articleinfo>
<appendix id="appdx_bitcore">
<title>Bitcore</title>
<simpara><indexterm>
  <primary>&quot;Bitcore&quot;</primary><secondary>id=&quot;bitcore16&quot;</secondary>
</indexterm>
<indexterm>
  <primary>id=&quot;bitcore16&quot;</primary>
</indexterm>Bitcore est une suite d&#39;outils fournis par BitPay. Son objectif est de fournir des outils faciles à utiliser pour les développeurs Bitcoin. Presque tout le code de Bitcore est écrit en JavaScript. Il existe des modules écrits spécifiquement pour NodeJS. Enfin, le module &quot;node&quot; de Bitcore inclut le code C++ de Bitcoin Core. Veuillez consulter <ulink url="https://bitcore.io">https://bitcore.io</ulink> pour plus d&#39;informations.</simpara>
<section id="_liste_des_fonctionnalités_de_bitcore">
<title>Liste des fonctionnalités de Bitcore</title>
<itemizedlist>
<listitem>
<simpara>
Nœud complet Bitcoin (nœud bitcore)
</simpara>
</listitem>
<listitem>
<simpara>
Explorateur de blocs (aperçu)
</simpara>
</listitem>
<listitem>
<simpara>
Utilitaires de bloc, de transaction et de portefeuille (bitcore-lib)
</simpara>
</listitem>
<listitem>
<simpara>
Communiquer directement avec le réseau P2P de Bitcoin (bitcore-p2p)
</simpara>
</listitem>
<listitem>
<simpara>
Génération mnémonique d&#39;entropie de valeur d&#8217;amorçage (bitcore-mnémonique)
</simpara>
</listitem>
<listitem>
<simpara>
Protocole de paiement (bitcore-payment-protocol)
</simpara>
</listitem>
<listitem>
<simpara>
Vérification et signature des messages (bitcore-message)
</simpara>
</listitem>
<listitem>
<simpara>
Schéma de chiffrement intégré à courbe elliptique (bitcore-ecies)
</simpara>
</listitem>
<listitem>
<simpara>
Service de portefeuille (bitcore-wallet-service)
</simpara>
</listitem>
<listitem>
<simpara>
Client de portefeuille (bitcore-wallet-client)
</simpara>
</listitem>
<listitem>
<simpara>
Intégration des services directement avec Bitcoin Core (bitcore-node)
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_exemples_de_bibliothèque_bitcore">
<title>Exemples de bibliothèque Bitcore</title>
<section id="_prérequis">
<title>Prérequis</title>
<itemizedlist>
<listitem>
<simpara>
NodeJS &gt;= 4.x
</simpara>
</listitem>
</itemizedlist>
<simpara>Si vous utilisez NodeJS et le nœud REPL :</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ npm install -g bitcore-lib bitcore-p2p</programlisting>
</section>
<section id="_exemples_de_portefeuille_utilisant_bitcore_lib">
<title>Exemples de portefeuille utilisant bitcore-lib</title>
<simpara>Création d&#39;une nouvelle adresse Bitcoin avec clé privée associée :</simpara>
<screen>&gt; bitcore = require('bitcore-lib')
&gt; privateKey = new bitcore.PrivateKey()
&gt; address = privateKey.toAddress().toString()</screen>
<simpara>Création d&#39;une clé privée déterministe hiérarchique et d&#39;une adresse :</simpara>
<screen>&gt; hdPrivateKey = bitcore.HDPrivateKey()
&gt; hdPublicKey = bitcore.HDPublicKey(hdPrivateKey)
&gt; hdAddress = new bitcore.Address(hdPublicKey.publicKey).toString()</screen>
<simpara>Création et signature d&#39;une transaction depuis un UTXO :</simpara>
<screen>&gt; utxo = {
txId: txId, // identifiant de transaction contenant une sortie non dépensée
outputIndex: outputIndex, // index de sortie (par exemple 0)
  address: addressOfUtxo,
  script: bitcore.Script.buildPublicKeyHashOut(addressOfUtxo).toString(),
satoshis: satoshis // montant envoyé à l&amp;#39;adresse
}
&gt; fee = 3000 //défini de manière appropriée pour les conditions sur le réseau
&gt; tx = new bitcore.Transaction()
        .from(utxo)
        .to(address, 35000)
        .fee(fee)
        .enableRBF()
        .sign(privateKeyOfUtxo)</screen>
<simpara>Remplacer la dernière transaction dans le mempool (replace-by-fee) :</simpara>
<screen>&gt; rbfTx = new Transaction()
           .from(utxo)
           .to(address, 35000)
           .fee(fee*2)
           .enableRBF()
           .sign(privateKeyOfUtxo);
&gt; tx.serialize();
&gt; rbfTx.serialize();</screen>
<simpara>Diffuser une transaction sur le réseau Bitcoin
(remarque : ne diffusez que des transactions valides ; reportez-vous à <ulink url="https://bitnodes.21.co/nodes">https://bitnodes.21.co/nodes</ulink> pour les hôtes homologues) :</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Copiez le code ci-dessous dans un fichier appelé <emphasis>broadcast.js</emphasis>.
</simpara>
</listitem>
<listitem>
<simpara>
Les variables <literal>tx</literal> et <literal>rbfTx</literal> sont la sortie de <literal>tx.serialize()</literal> et <literal>rbfTx.serialize()</literal>, respectivement.
</simpara>
</listitem>
<listitem>
<simpara>
Afin de remplacer par des frais, l&#39;homologue doit prendre en charge l&#39;option bitcoind <literal>mempoolreplace</literal> et la définir sur <literal>1</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
Exécutez le nœud de fichier <emphasis>broadcast.js</emphasis><indexterm>
  <primary>&quot;&quot;</primary><secondary>startref=&quot;bitcore16&quot;</secondary>
</indexterm>
<indexterm>
  <primary>startref=&quot;bitcore16&quot;</primary>
</indexterm> :
</simpara>
</listitem>
</orderedlist>
<screen>var p2p = require('bitcore-p2p');
var bitcore = require('bitcore-lib');
var tx = new bitcore.Transaction('output from serialize function');
var rbfTx = new bitcore.Transaction('output from serialize function');
var host = 'ip address'; //use valid peer listening on tcp 8333
var peer = new p2p.Peer({host: host});
var messages = new p2p.Messages();
peer.on('ready', function() {
  var txs = [messages.Transaction(tx), messages.Transaction(rbfTx)];
  var index = 0;
  var interval = setInterval(function() {
    peer.sendMessage(txs[index++]);
    console.log('tx: ' + index + ' sent');
    if (index === txs.length) {
      clearInterval(interval);
      console.log('disconnecting from peer: ' + host);
      peer.disconnect();
    }
  }, 2000);
});
peer.connect();</screen>
</section>
</section>
</appendix>
</article>
