<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<articleinfo>
    <date>2022-03-13</date>
</articleinfo>
<section id="ch12">
<title>Applications de chaîne de blocs</title>
<simpara>Appuyons-nous maintenant sur notre compréhension du bitcoin en le considérant comme une <emphasis>plate-forme d&#39;application</emphasis>. De nos jours, de nombreuses personnes utilisent le terme &quot;blockchain&quot; ou &quot;chaîne de blocs&quot; pour désigner toute plate-forme d&#39;application qui partage les principes de conception du bitcoin. Le terme est souvent mal utilisé et appliqué à de nombreuses choses qui ne fournissent pas les principales fonctionnalités fournies par la chaîne de blocs de Bitcoin.</simpara>
<simpara>Dans ce chapitre, nous examinerons les fonctionnalités offertes par la chaîne de blocs Bitcoin, en tant que plate-forme d&#39;application. Nous considérerons les <emphasis>primitives</emphasis> de construction d&#39;applications, qui forment les blocs de construction de toute application chaîne de blocs. Nous examinerons plusieurs applications importantes qui utilisent ces primitives, telles que les canaux de paiement (état) et les canaux de paiement routés (Lightning Network).</simpara>
<section id="_présentation">
<title>Présentation</title>
<simpara><indexterm>
  <primary>&quot;applications chaîne de blocs&quot;</primary><secondary>&quot;avantages du système Bitcoin&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;avantages du système Bitcoin&quot;</primary>
</indexterm>Le système Bitcoin a été conçu comme un système de monnaie et de paiement décentralisé. Cependant, la plupart de ses fonctionnalités sont dérivées de constructions de niveau beaucoup plus bas qui peuvent être utilisées pour des applications beaucoup plus larges. Bitcoin n&#39;a pas été construit avec des composants tels que des comptes, des utilisateurs, des soldes et des paiements. Au lieu de cela, il utilise un langage de script transactionnel avec des fonctions cryptographiques de bas niveau, comme nous l&#39;avons vu dans <xref linkend="transactions"/>. Tout comme les concepts de niveau supérieur des comptes, des soldes et des paiements peuvent être dérivés de ces primitives de base, il en va de même pour de nombreuses autres applications complexes. Ainsi, la chaîne de blocs Bitcoin peut devenir une plate-forme applicative offrant des services de confiance aux applications, tels que les contrats intelligents, dépassant de loin l&#39;objectif initial de la monnaie numérique et des paiements.</simpara>
</section>
<section id="_structures_de_base_les_primitifs">
<title>Structures de base (les primitifs)</title>
<simpara><indexterm>
  <primary>&quot;applications en chaîne de blocs&quot;</primary><secondary>&quot;blocs de base (primitifs)&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;blocs de base (primitifs)&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;primitifs&quot;</primary>
</indexterm>Lorsqu&#39;il fonctionne correctement et sur le long terme, le système Bitcoin offre certaines garanties, qui peuvent servir de structures de base pour créer des applications. Ceux-ci inclus:</simpara>
<variablelist>
<varlistentry>
<term>
Pas de double dépense
</term>
<listitem>
<simpara>
La garantie la plus fondamentale de l&#39;algorithme de consensus décentralisé de Bitcoin garantit qu&#39;aucun UTXO ne peut être dépensé deux fois.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Immuabilité
</term>
<listitem>
<simpara>
Une fois qu&#39;une transaction est enregistrée dans la chaîne de blocs et que suffisamment de travail a été ajouté avec les blocs suivants, les données de la transaction deviennent immuables. L&#39;immuabilité est garantie par l&#39;énergie, car la réécriture de la chaîne de blocs nécessite une dépense d&#39;énergie pour produire une preuve de travail. L&#39;énergie requise et donc le degré d&#39;immuabilité augmentent avec la quantité de travail engagé au-dessus du bloc contenant une transaction.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Neutralité
</term>
<listitem>
<simpara>
Le réseau Bitcoin décentralisé propage des transactions valides quelle que soit l&#39;origine ou le contenu de ces transactions. Cela signifie que n&#39;importe qui peut créer une transaction valide avec des frais suffisants et être sûr qu&#39;il sera en mesure de transmettre cette transaction et de l&#39;inclure dans la chaîne de blocs à tout moment.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Horodatage sécurisé
</term>
<listitem>
<simpara>
Les règles de consensus rejettent tout bloc dont l&#39;horodatage est trop éloigné dans le passé ou dans le futur. Cela garantit que les horodatages sur les blocs sont fiables. L&#39;horodatage sur un bloc implique une garantie non dépensée avant pour les entrées de toutes les transactions incluses.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Autorisation
</term>
<listitem>
<simpara>
Les signatures numériques, validées dans un réseau décentralisé, offrent des garanties d&#39;autorisation. Les scripts qui contiennent une exigence de signature numérique ne peuvent être exécutés sans l&#39;autorisation du détenteur de la clé privée impliquée dans le script.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Auditabilité
</term>
<listitem>
<simpara>
Toutes les transactions sont publiques et peuvent être auditées. Toutes les transactions et tous les blocs sont liés dans une chaîne ininterrompue jusqu&#8217;au bloc de genèse.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Comptabilité
</term>
<listitem>
<simpara>
Dans toute transaction (à l&#39;exception de la transaction coinbase), la valeur des entrées est égale à la valeur des sorties plus les frais. Il n&#39;est pas possible de créer ou de détruire de la valeur bitcoin dans une transaction. Les sorties ne peuvent pas dépasser les entrées.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Non-expiration
</term>
<listitem>
<simpara>
Une transaction valide n&#39;expire pas. S&#39;il est valable aujourd&#39;hui, il le sera dans un avenir proche, tant que les intrants ne seront pas dépensés et que les règles de consensus ne changeront pas.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Intégrité
</term>
<listitem>
<simpara>
Une transaction bitcoin signée avec <literal>SIGHASH_ALL</literal> ou des parties d&#39;une transaction signée par un autre type <literal>SIGHASH</literal> ne peuvent pas être modifiées sans invalider la signature, invalidant ainsi la transaction elle-même.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Atomicité des transactions
</term>
<listitem>
<simpara>
Les transactions Bitcoin sont atomiques. Ils sont valides et confirmés (minés) ou non. Les transactions partielles ne peuvent pas être extraites et il n&#39;y a pas d&#39;état intermédiaire pour une transaction. À tout moment, une transaction est minée ou non.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Unités de valeur discrètes (indivisibles)
</term>
<listitem>
<simpara>
Les sorties de transaction sont des unités de valeur discrètes et indivisibles. Elles peuvent être dépensés ou non dépensés, en totalité. Elles ne peuvent pas être divisés ou partiellement dépensés.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Quorum de contrôle
</term>
<listitem>
<simpara>
les contraintes de multisignature dans les scripts imposent un quorum d&#39;autorisation, prédéfini dans le schéma de multisignature. L&#39;exigence M-de-N est appliquée par les règles de consensus.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Verrou temporel
</term>
<listitem>
<simpara>
Toute clause de script contenant un verrou temporel relatif ou absolu ne peut être exécutée qu&#39;après que son âge dépasse le temps spécifié.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Réplication
</term>
<listitem>
<simpara>
Le stockage décentralisé de la chaîne de blocs garantit que lorsqu&#39;une transaction est extraite, après des confirmations suffisantes, elle est répliquée sur le réseau et devient durable et résistante aux coupures de courant, aux pertes de données, etc.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Protection contre la falsification
</term>
<listitem>
<simpara>
Une transaction ne peut dépenser que des sorties existantes et validées. Il n&#39;est pas possible de créer ou de contrefaire de la valeur.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Cohérence
</term>
<listitem>
<simpara>
En l&#39;absence de partitions de mineurs, les blocs enregistrés dans la chaîne de blocs sont sujets à une réorganisation ou à un désaccord avec une probabilité décroissante de manière exponentielle, en fonction de la profondeur à laquelle ils sont enregistrés. Une fois profondément enregistrés, le calcul et l&#39;énergie nécessaires pour changer rendent le changement pratiquement irréalisable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Enregistrement de l&#39;état externe
</term>
<listitem>
<simpara>
Une transaction peut valider une valeur de données, via <literal>OP_RETURN</literal>, représentant une transition d&#39;état dans une machine à états externe.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Émission prévisible
</term>
<listitem>
<simpara>
Moins de 21 millions de bitcoins seront émis, à un rythme prévisible.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>La liste des blocs de construction (ou structures de base) n&#39;est pas complète et d&#39;autres sont ajoutées à chaque nouvelle fonctionnalité introduite dans le bitcoin.</simpara>
</section>
<section id="_applications_à_partir_des_structures_de_base">
<title>Applications à partir des structures de base</title>
<simpara><indexterm>
  <primary>&quot;applications chaîne de blocs&quot;</primary><secondary>&quot;exemples de&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;exemples de&quot;</primary>
</indexterm>Les structures de base proposés par bitcoin sont des éléments d&#39;une plateforme de confiance qui peuvent être utilisés pour composer des applications. Voici quelques exemples d&#39;applications qui existent aujourd&#39;hui et les blocs de construction qu&#39;elles utilisent :</simpara>
<variablelist>
<varlistentry>
<term>
Preuve d&#39;existence (notaire numérique)
</term>
<listitem>
<simpara>
<indexterm>
  <primary>&quot;services de notaire numérique&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;preuve d&#39;existence&quot;</primary>
</indexterm>Immuabilité + Horodatage + Durabilité. Une empreinte numérique peut être validée avec une transaction dans la chaîne de blocs, prouvant qu&#39;un document existait (horodatage) au moment où il a été enregistré. L&#39;empreinte digitale ne pourra pas être modifiée ex-post-facto (Immutabilité) et la preuve sera conservée de façon permanente (Durabilité).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Kickstarter (Lighthouse)
</term>
<listitem>
<simpara>
Cohérence + Atomicité + Intégrité. Si vous signez une entrée et la sortie (intégrité) d&#39;une transaction de collecte de fonds, d&#39;autres peuvent contribuer à la collecte de fonds mais elle ne peut pas être dépensée (atomicité) tant que l&#39;objectif (valeur de sortie) n&#39;est pas financé (cohérence).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Canaux de paiement
</term>
<listitem>
<simpara>
<indexterm>
  <primary>&quot;canaux de paiement (d&#39;état)&quot;</primary><secondary>&quot;structures de base (les primitifs) utilisés dans&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;structures de base (les primitifs) utilisés dans&quot;</primary>
</indexterm>Quorum de contrôle + Verrou temporel + Pas de double dépense + Non-expiration + Résistance à la censure + Autorisation. Un multisig 2-of-2 (Quorum) avec un verrou temporel (Verrou temporel) utilisé comme transaction de &quot;règlement&quot; d&#39;un canal de paiement peut être détenu (Non-expiration) et dépensé à tout moment (Résistance à la censure) par l&#39;une ou l&#39;autre des parties (Autorisation). Les deux parties peuvent alors créer des transactions d&#39;engagement qui doublent (Pas de double dépense) le règlement sur un verrou temporel plus court (Verrou temporel).
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="_counterparty">
<title>Counterparty</title>
<simpara><indexterm>
  <primary>&quot;applications en chaîne de blocs&quot;</primary><secondary>&quot;Conterparty&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;Conterparty&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;Conterparty&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;contrats intelligents&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;Ethereum Virtual Machine (EVM)&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;gestion d&#39;actifs extrinsèques&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;gestion d&#39;actifs virtuels&quot;</primary>
</indexterm>Conterparty est une couche de protocole construite au-dessus de bitcoin. Le protocole Counterparty offre la possibilité de créer et d&#39;échanger des actifs virtuels et des jetons. De plus, Counterparty propose un échange décentralisé d&#39;actifs. Conterparty met également en œuvre des contrats intelligents, basés sur la machine virtuelle Ethereum (EVM).</simpara>
<simpara>Conterparty intègre des métadonnées dans les transactions bitcoin, en utilisant l&#39;opcode <literal>OP_RETURN</literal> ou des adresses multisignatures 1 sur N qui encodent les métadonnées à la place des clés publiques. En utilisant ces mécanismes, Counterparty implémente une couche de protocole encodée dans les transactions bitcoin. La couche de protocole supplémentaire peut être interprétée par des applications compatibles avec Conterparty, telles que les portefeuilles et les explorateurs de chaînes de blocs, ou toute application construite à l&#39;aide des bibliothèques de Conterparty.</simpara>
<simpara><indexterm>
  <primary>&quot;propriété numérique&quot;</primary>
</indexterm>Conterparty peut être utilisée comme plate-forme pour d&#39;autres applications et services, à leur tour. Par exemple, Tokenly est une plate-forme construite sur Counterparty qui permet aux créateurs de contenu, aux artistes et aux entreprises d&#39;émettre des jetons qui expriment la propriété numérique et peuvent être utilisés pour louer, accéder, échanger ou acheter du contenu, des produits et des services. D&#39;autres applications tirant parti de Counterparty incluent des jeux (Spells of Genesis) et des projets de grille informatique (Folding Coin).</simpara>
<simpara>Plus de détails sur Counterparty peuvent être trouvés sur <ulink url="https://counterparty.io">https://counterparty.io</ulink>. Le projet à source libre est disponible sur <ulink url="https://github.com/CounterpartyXCP">https://github.com/CounterpartyXCP</ulink>.</simpara>
</section>
<section id="state_channels">
<title>Canaux de paiement et canaux d&#39;état</title>
<simpara><emphasis>Les canaux de paiement</emphasis> <indexterm>
  <primary>&quot;applications chaîne de blocs&quot;</primary><secondary>&quot;canaux de paiement (état)&quot;</secondary><tertiary>id=&quot;BCApayment12&quot;</tertiary>
</indexterm>
<indexterm>
  <primary>&quot;canaux de paiement (état)&quot;</primary><secondary>id=&quot;BCApayment12&quot;</secondary>
</indexterm>
<indexterm>
  <primary>id=&quot;BCApayment12&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;canaux de paiement (état)&quot;</primary><secondary>&quot;défini&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;défini&quot;</primary>
</indexterm>sont un mécanisme sans confiance pour échanger des bitcoins transactions entre deux parties, en dehors de la chaîne de blocs Bitcoin. Ces transactions, qui seraient valides si elles étaient réglées sur la chaîne de blocs Bitcoin, sont plutôt détenues hors chaîne, agissant comme des <emphasis>billets à ordre</emphasis> pour un éventuel règlement par lots. Étant donné que les transactions ne sont pas réglées, elles peuvent être échangées sans la latence de règlement habituelle, ce qui permet un débit de transaction extrêmement élevé, une latence faible (inférieure à la milliseconde) et une granularité fine (niveau satoshi).</simpara>
<simpara>En fait, le terme <emphasis>canal</emphasis> est une métaphore. Les canaux d&#39;état sont des constructions virtuelles représentées par l&#39;échange d&#39;état entre deux parties, en dehors de la chaîne de blocs. Il n&#39;y a pas de &quot;canaux&quot; en soi et le mécanisme de transport de données sous-jacent n&#39;est pas le canal. Nous utilisons le terme canal pour représenter la relation et l&#39;état partagé entre deux parties, en dehors de la chaîne de blocs.</simpara>
<simpara><indexterm>
  <primary>&quot;canaux de paiement (d&#39;état)&quot;</primary><secondary>&quot;concept de&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;concept de&quot;</primary>
</indexterm>Pour expliquer davantage ce concept, pensez à un flux TCP. Du point de vue des protocoles de niveau supérieur, il s&#39;agit d&#39;une &quot;interface de connexion&quot; connectant deux applications sur Internet. Mais si vous regardez le trafic réseau, un flux TCP n&#39;est qu&#39;un canal virtuel sur des paquets IP. Chaque extrémité du flux TCP séquence et assemble les paquets IP pour créer l&#39;illusion d&#39;un flux d&#39;octets. En dessous, ce sont tous les paquets déconnectés. De même, un canal de paiement n&#39;est qu&#39;une série de transactions. S&#39;ils sont correctement séquencés et connectés, ils créent des obligations remboursables auxquelles vous pouvez faire confiance même si vous ne faites pas confiance à l&#39;autre côté du canal.</simpara>
<simpara>Dans cette section, nous examinerons différentes formes de canaux de paiement. Premièrement, nous examinerons les mécanismes utilisés pour construire un canal de paiement unidirectionnel (unidirectionnel) pour un service de micropaiement mesuré, tel que le streaming vidéo. Ensuite, nous développerons ce mécanisme et introduirons des canaux de paiement bidirectionnels. Enfin, nous verrons comment des canaux bidirectionnels peuvent être connectés de bout en bout pour former des canaux multisauts dans un réseau routé, d&#39;abord proposé sous le nom de <emphasis>Lightning Network</emphasis>.</simpara>
<simpara>Les canaux de paiement font partie du concept plus large d&#39;un <emphasis>canal d&#39;état</emphasis>, qui représente une altération d&#39;état hors chaîne, sécurisée par un éventuel règlement dans une chaîne de blocs. Un canal de paiement est un canal d&#39;état où l&#39;état modifié est le solde d&#39;une monnaie virtuelle.</simpara>
<section id="_canaux_d_39_état_concepts_de_base_et_terminologie">
<title>Canaux d&#39;état, concepts de base et terminologie</title>
<simpara><indexterm>
  <primary>&quot;canaux de paiement (d&#39;état)&quot;</primary><secondary>&quot;terminologie&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;terminologie&quot;</primary>
</indexterm>Un canal d&#39;état est établi entre deux parties, par le biais d&#39;une transaction qui verrouille un état partagé sur la chaîne de blocs. C&#39;est ce qu&#39;on appelle la <emphasis>transaction de financement</emphasis> ou <emphasis>transaction d&#39;ancrage</emphasis>. Cette transaction unique doit être transmise au réseau et exploitée pour établir le canal. Dans l&#39;exemple d&#39;un canal de paiement, l&#39;état bloqué est le solde initial (en devise) du canal.</simpara>
<simpara>Les deux parties échangent alors des transactions signées, appelées <emphasis>transactions d&#39;engagement</emphasis>, qui modifient l&#39;état initial. Ces transactions sont des transactions valides dans la mesure où elles <emphasis>pourraient</emphasis> être soumises pour règlement par l&#39;une ou l&#39;autre des parties, mais sont plutôt détenues hors chaîne par chaque partie en attendant la fermeture du canal. Les mises à jour d&#39;état peuvent être créées aussi rapidement que chaque partie peut créer, signer et transmettre une transaction à l&#39;autre partie. En pratique, cela signifie que des milliers de transactions par seconde peuvent être échangées.</simpara>
<simpara>Lors de l&#39;échange de transactions d&#39;engagement, les deux parties invalident également les états précédents, de sorte que la transaction d&#39;engagement la plus récente est toujours la seule qui puisse être remboursée. Cela empêche l&#39;une ou l&#39;autre des parties de tricher en fermant unilatéralement le canal avec un état antérieur expiré qui lui est plus favorable que l&#39;état actuel. Nous examinerons les différents mécanismes qui peuvent être utilisés pour invalider l&#39;état antérieur dans la suite de ce chapitre.</simpara>
<simpara>Enfin, le canal peut être fermé soit de manière coopérative, en soumettant une <emphasis>transaction de règlement</emphasis> finale à la chaîne de blocs, soit unilatéralement, par l&#39;une ou l&#39;autre des parties soumettant la dernière transaction d&#39;engagement à la chaîne de blocs. Une option de fermeture unilatérale est nécessaire au cas où l&#39;une des parties se déconnecte de manière inattendue. La transaction de règlement représente l&#39;état final du canal et est réglée sur la chaîne de blocs.</simpara>
<simpara>Pendant toute la durée de vie de la chaîne, seules deux transactions doivent être soumises pour minage sur la chaîne de blocs: les transactions de financement et de règlement. Entre ces deux états, les deux parties peuvent échanger un nombre illimité de transactions d&#39;engagement qui ne sont jamais vues par personne d&#39;autre, ni soumises à la chaîne de blocs.</simpara>
<simpara><xref linkend="payment_channel"/> illustre un canal de paiement entre Bob et Alice, montrant les transactions de financement, d&#39;engagement et de règlement.<indexterm>
  <primary>&quot;cas d&#8217;utilisation&quot;</primary><secondary>&quot;acheter un café&quot;</secondary><tertiary>startref=&quot;alicetwelve&quot;</tertiary>
</indexterm>
<indexterm>
  <primary>&quot;acheter un café&quot;</primary><secondary>startref=&quot;alicetwelve&quot;</secondary>
</indexterm>
<indexterm>
  <primary>startref=&quot;alicetwelve&quot;</primary>
</indexterm></simpara>
<figure id="payment_channel"><title>Un canal de paiement entre Bob et Alice, montrant les transactions de financement, d&#39;engagement et de règlement</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_1201.png"/>
  </imageobject>
  <textobject><phrase>&quot;Un canal de paiement entre Bob et Alice</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_exemple_de_canal_de_paiement_simple">
<title>Exemple de canal de paiement simple</title>
<simpara><indexterm>
  <primary>&quot;canaux de paiement (d&#39;état)&quot;</primary><secondary>&quot;exemple de&quot;</secondary><tertiary>id=&quot;PSCexample12&quot;</tertiary>
</indexterm>
<indexterm>
  <primary>&quot;exemple de&quot;</primary><secondary>id=&quot;PSCexample12&quot;</secondary>
</indexterm>
<indexterm>
  <primary>id=&quot;PSCexample12&quot;</primary>
</indexterm>Pour expliquer les canaux d&#39;état, nous commençons par un exemple très simple. Nous démontrons un canal à sens unique, ce qui signifie que la valeur ne circule que dans une seule direction. Nous partirons également de l&#39;hypothèse naïve que personne n&#39;essaie de tricher, pour garder les choses simples. Une fois que nous aurons expliqué l&#39;idée de base du canal, nous examinerons ce qu&#39;il faut pour le rendre sans confiance afin qu&#39;aucune des parties ne puisse tricher, même si elle essaie de le faire.</simpara>
<simpara>Pour cet exemple, nous supposerons deux participants : Emma et Fabian. Fabian propose un service de diffusion vidéo en continu facturé à la seconde via un canal de micropaiement. Fabian facture 0,01 millibit (0,00001 BTC) par seconde de vidéo, ce qui équivaut à 36 millibits (0,036 BTC) par heure de vidéo. Emma est une utilisatrice qui achète ce service de diffusion vidéo en continu auprès de Fabian. <xref linkend="emma_fabian_streaming_video"/> montre Emma achetant le service de diffusion vidéo en continu de Fabian en utilisant un canal de paiement.</simpara>
<figure id="emma_fabian_streaming_video"><title>Emma achète la vidéo en continu de Fabian avec un canal de paiement, payant pour chaque seconde de vidéo</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_1202.png"/>
  </imageobject>
  <textobject><phrase>&quot;Emma achète la diffusion vidéo en continu de Fabian avec un canal de paiement</phrase></textobject>
</mediaobject>
</figure>
<simpara>Dans cet exemple, Fabian et Emma utilisent un logiciel spécial qui gère à la fois le canal de paiement et la diffusion vidéo en continu. Emma exécute le logiciel dans son navigateur, Fabian l&#39;exécute sur un serveur. Le logiciel inclut les fonctionnalités de base du portefeuille bitcoin et peut créer et signer des transactions bitcoin. Le concept et le terme &quot;canal de paiement&quot; sont complètement cachés aux utilisateurs. Ce qu&#39;ils voient, c&#39;est une vidéo payée à la seconde.</simpara>
<simpara>Pour mettre en place le canal de paiement, Emma et Fabian établissent une adresse multisignature 2 sur 2, chacun d&#39;eux détenant l&#39;une des clés. Du point de vue d&#39;Emma, le logiciel de son navigateur présente un code QR avec une adresse P2SH (commençant par &quot;3&quot;) et lui demande de soumettre un &quot;dépôt&quot; pour jusqu&#39;à 1 heure de vidéo. L&#39;adresse est alors financée par Emma. La transaction d&#39;Emma, payant à l&#39;adresse multisignature, est la transaction de financement ou d&#39;ancrage pour le canal de paiement.</simpara>
<simpara>Pour cet exemple, disons qu&#39;Emma finance la chaîne avec 36 millibits (0,036 BTC). Cela permettra à Emma de consommer <emphasis>jusqu&#39;à</emphasis> 1 heure de diffusion vidéo en continu. La transaction de financement dans ce cas fixe le montant maximum qui peut être transmis dans ce canal, en définissant la <emphasis>capacité du canal</emphasis>.</simpara>
<simpara>La transaction de financement consomme une ou plusieurs entrées du portefeuille d&#39;Emma, approvisionnant les fonds. Il crée une sortie d&#39;une valeur de 36 millibits payée à l&#39;adresse multisignature 2 sur 2 contrôlée conjointement entre Emma et Fabian. Il peut avoir des sorties supplémentaires pour revenir au portefeuille d&#39;Emma.</simpara>
<simpara>Une fois la transaction de financement confirmée, Emma peut commencer à diffuser la vidéo. Le logiciel d&#39;Emma crée et signe une transaction d&#39;engagement qui modifie le solde du canal pour créditer 0,01 millibit à l&#39;adresse de Fabian et rembourser 35,99 millibits à Emma. La transaction signée par Emma consomme la sortie de 36 millibits créée par la transaction de financement et crée deux sorties : une pour son remboursement, l&#39;autre pour le paiement de Fabian. La transaction n&#39;est que partiellement signée - elle nécessite deux signatures (2 sur 2), mais n&#39;a que la signature d&#39;Emma. Lorsque le serveur de Fabian reçoit cette transaction, il ajoute la deuxième signature (pour l&#39;entrée 2 sur 2) et la renvoie à Emma avec 1 seconde de vidéo. Désormais, les deux parties ont une transaction d&#39;engagement entièrement signée que l&#39;une ou l&#39;autre peut racheter, représentant le solde à jour correct du canal. Aucune des parties ne diffuse cette transaction sur le réseau.</simpara>
<simpara>Au tour suivant, le logiciel d&#39;Emma crée et signe une autre transaction d&#39;engagement (engagement #2) qui consomme la <emphasis>même</emphasis> sortie 2 sur 2 de la transaction de financement. La seconde transaction d&#39;engagement alloue une sortie de 0,02 millibits à l&#39;adresse de Fabian et une sortie de 35,98 millibits à l&#39;adresse d&#39;Emma. Cette nouvelle transaction est le paiement de deux secondes cumulées de vidéo. Le logiciel de Fabian signe et renvoie la deuxième transaction d&#39;engagement, ainsi qu&#39;une autre seconde de vidéo.</simpara>
<simpara>De cette manière, le logiciel d&#39;Emma continue d&#39;envoyer des transactions d&#39;engagement au serveur de Fabian en échange de diffusion vidéo en continu. Le solde de la chaîne s&#39;accumule progressivement en faveur de Fabian, car Emma consomme plus de secondes de vidéo. Disons qu&#39;Emma regarde 600 secondes (10 minutes) de vidéo, créant et signant 600 transactions d&#39;engagement. La dernière transaction d&#39;engagement (#600) aura deux sorties, divisant le solde de la chaîne, 6 millibits pour Fabian et 30 millibits pour Emma.</simpara>
<simpara>Enfin, Emma sélectionne &quot;Stop&quot; pour arrêter le streaming vidéo. Fabian ou Emma peuvent maintenant transmettre la transaction d&#39;état finale pour règlement. Cette dernière transaction est la <emphasis>transaction de règlement</emphasis> et paie Fabian pour toute la vidéo consommée par Emma, remboursant le reste de la transaction de financement à Emma.</simpara>
<simpara><xref linkend="video_payment_channel"/> montre le canal entre Emma et Fabian et les transactions d&#39;engagement qui mettent à jour le solde du canal.</simpara>
<simpara>Au final, seules deux transactions sont enregistrées sur la chaîne de bocs: la transaction de financement qui établit le canal et une transaction de règlement qui répartit correctement le solde final entre les deux participants.<indexterm>
  <primary>&quot;&quot;</primary><secondary>startref=&quot;PSCexample12&quot;</secondary>
</indexterm>
<indexterm>
  <primary>startref=&quot;PSCexample12&quot;</primary>
</indexterm></simpara>
<figure id="video_payment_channel"><title>Le canal de paiement d&#39;Emma avec Fabian, montrant les transactions d&#39;engagement qui mettent à jour le solde du canal</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_1203.png"/>
  </imageobject>
  <textobject><phrase>&quot;Le canal de paiement d&#39;Emma avec Fabian</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_créer_des_canaux_sans_confiance">
<title>Créer des canaux sans confiance</title>
<simpara><indexterm>
  <primary>&quot;canaux de paiements (état)&quot;</primary><secondary>&quot;créer des canaux sans confiance&quot;</secondary><tertiary>id=&quot;PSCtrust12&quot;</tertiary>
</indexterm>
<indexterm>
  <primary>&quot;créer des canaux sans confiance&quot;</primary><secondary>id=&quot;PSCtrust12&quot;</secondary>
</indexterm>
<indexterm>
  <primary>id=&quot;PSCtrust12&quot;</primary>
</indexterm>Le canal que nous venons de décrire fonctionne, mais seulement si les deux parties coopèrent, sans échec ni tentative de tricherie. Examinons certains des scénarios qui cassent ce canal et voyons ce qui est nécessaire pour les réparer :</simpara>
<itemizedlist>
<listitem>
<simpara>
Une fois la transaction de financement effectuée, Emma a besoin de la signature de Fabian pour récupérer l&#39;argent. Si Fabian disparaît, les fonds d&#39;Emma sont enfermés dans un 2 sur 2 et effectivement perdus. Ce canal, tel que construit, entraîne une perte de fonds si l&#39;une des parties se déconnecte avant qu&#39;il y ait au moins une transaction d&#39;engagement signée par les deux parties.
</simpara>
</listitem>
<listitem>
<simpara>
Pendant que le canal est en cours d&#39;exécution, Emma peut prendre n&#39;importe laquelle des transactions d&#39;engagement que Fabian a contresignées et en transmettre une à la chaîne de blocs. Pourquoi payer 600 secondes de vidéo, si elle peut transmettre la transaction d&#39;engagement #1 et ne payer que 1 seconde de vidéo ? La chaîne échoue car Emma peut tricher en diffusant un engagement préalable qui est en sa faveur.
</simpara>
</listitem>
</itemizedlist>
<simpara>Ces deux problèmes peuvent être résolus avec des verrous temporels. Voyons comment nous pourrions utiliser des verrous temporels au niveau des transactions (<literal>nLocktime</literal>).</simpara>
<simpara>Emma ne peut pas risquer de financer un multisig 2 sur 2 à moins qu&#39;elle n&#39;ait un remboursement garanti. Pour résoudre ce problème, Emma construit les transactions de financement et de remboursement en même temps. Elle signe la transaction de financement mais ne la transmet à personne. Emma transmet uniquement la transaction de remboursement à Fabian et obtient sa signature.</simpara>
<simpara>La transaction de remboursement agit comme la première transaction d&#39;engagement et son verrou temporel établit la limite supérieure pour la durée de vie du canal. Dans ce cas, Emma pourrait définir le <literal>nLocktime</literal> sur 30 jours ou 4320 blocs dans le futur. Toutes les transactions d&#39;engagement ultérieures doivent avoir un verrou temporel plus court, afin qu&#39;elles puissent être remboursées avant la transaction de remboursement.</simpara>
<simpara>Maintenant qu&#39;Emma a une transaction de remboursement entièrement signée, elle peut transmettre en toute confiance la transaction de financement signée en sachant qu&#39;elle pourra éventuellement, après l&#39;expiration du délai, racheter la transaction de remboursement même si Fabian disparaît.</simpara>
<simpara>Chaque transaction d&#39;engagement que les parties échangent pendant la durée de vie du canal sera verrouillée dans le futur. Mais le délai sera légèrement plus court pour chaque engagement afin que l&#39;engagement le plus récent puisse être remboursé avant l&#39;engagement précédent qu&#39;il invalide. En raison de nLockTime, aucune des parties ne peut propager avec succès l&#39;une des transactions d&#39;engagement jusqu&#39;à l&#39;expiration de leur verrouillage temporel. Si tout va bien, ils coopéreront et fermeront le canal gracieusement avec une transaction de règlement, rendant inutile la transmission d&#39;une transaction d&#39;engagement intermédiaire. Sinon, la transaction d&#39;engagement la plus récente peut être propagée pour régler le compte et invalider toutes les transactions d&#39;engagement précédentes.</simpara>
<simpara>Par exemple, si la transaction d&#39;engagement #1 est verrouillée dans le temps sur 4320 blocs à l&#39;avenir, alors la transaction d&#39;engagement #2 est verrouillée dans le temps sur 4319 blocs dans le futur. La transaction d&#39;engagement #600 peut être dépensée 600 blocs avant que la transaction d&#39;engagement #1 ne devienne valide.</simpara>
<simpara><xref linkend="timelocked_commitments"/> montre chaque transaction d&#39;engagement définissant un verrou temporel plus court, lui permettant d&#39;être dépensé avant que les engagements précédents ne deviennent valides.</simpara>
<figure id="timelocked_commitments"><title>Chaque engagement fixe un délai plus court, ce qui lui permet d&#39;être dépensé avant que les engagements précédents ne deviennent valides</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_1204.png"/>
  </imageobject>
  <textobject><phrase>&quot;Chaque engagement fixe un délai plus court</phrase></textobject>
</mediaobject>
</figure>
<simpara>Chaque transaction d&#39;engagement ultérieure doit avoir un verrou temporel plus court afin qu&#39;elle puisse être diffusée avant ses prédécesseurs et avant la transaction de remboursement. La possibilité de diffuser un engagement plus tôt garantit qu&#39;il sera en mesure de dépenser la sortie de financement et d&#39;empêcher toute autre transaction d&#39;engagement d&#39;être remboursée en dépensant la sortie. Les garanties offertes par la chaîne de blocs Bitcoin, empêchant les doubles dépenses et appliquant des verrous temporels, permettent effectivement à chaque transaction d&#39;engagement d&#39;invalider ses prédécesseurs.</simpara>
<simpara>Les canaux d&#39;état utilisent des verrous temporels pour appliquer des contrats intelligents dans une dimension temporelle. Dans cet exemple, nous avons vu comment la dimension temporelle garantit que la transaction d&#39;engagement la plus récente devient valide avant tout engagement antérieur. Ainsi, la transaction d&#39;engagement la plus récente peut être transmise, dépensant les entrées et invalidant les transactions d&#39;engagement précédentes. L&#39;application de contrats intelligents avec des délais absolus protège contre la tricherie par l&#39;une des parties. Cette implémentation n&#39;a besoin de rien de plus que des verrous temporels absolus au niveau de la transaction (<literal>nLocktime</literal>). Ensuite, nous verrons comment les verrous temporels au niveau du script, <literal>CHECKLOCKTIMEVERIFY</literal> et <literal>CHECKSEQUENCEVERIFY</literal>, peuvent être utilisés pour construire des canaux d&#39;état plus flexibles, utiles et sophistiqués.</simpara>
<simpara>La première forme de canal de paiement unidirectionnel a été présentée sous la forme d&#39;un prototype d&#39;application de streaming vidéo en 2015 par une équipe de développeurs argentins.</simpara>
<simpara>Les verrous temporels ne sont pas le seul moyen d&#39;invalider les transactions d&#39;engagement antérieures. Dans les sections suivantes, nous verrons comment une clé de révocation peut être utilisée pour obtenir le même résultat. Les verrous temporels sont efficaces mais ils ont deux inconvénients distincts. En établissant un verrou temporel maximal lors de la première ouverture du canal, ils limitent la durée de vie du canal. Pire, ils obligent les implémentations de canaux à trouver un équilibre entre autoriser des canaux à longue durée de vie et obliger l&#39;un des participants à attendre très longtemps un remboursement en cas de fermeture prématurée. Par exemple, si vous autorisez le canal à rester ouvert pendant 30 jours, en réglant le délai de remboursement sur 30 jours, si l&#39;une des parties disparaît immédiatement, l&#39;autre partie doit attendre 30 jours pour un remboursement. Plus le point final est éloigné, plus le remboursement est éloigné.</simpara>
<simpara>Le deuxième problème est que puisque chaque transaction d&#39;engagement ultérieure doit décrémenter le verrouillage temporel, il existe une limite explicite sur le nombre de transactions d&#39;engagement qui peuvent être échangées entre les parties. Par exemple, un canal de 30 jours, définissant un verrouillage temporel de 4320 blocs dans le futur, ne peut accepter que 4320 transactions d&#39;engagement intermédiaires avant de devoir être clôturé. Il y a un danger à définir l&#39;intervalle de transaction d&#39;engagement de verrouillage de temps à 1 bloc. En définissant l&#39;intervalle de verrouillage entre les transactions d&#39;engagement sur 1 bloc, un développeur crée une charge très lourde pour les participants au canal qui doivent être vigilants, rester en ligne et regarder, et être prêts à transmettre la bonne transaction d&#39;engagement à tout moment.</simpara>
<simpara>Maintenant que nous comprenons comment les verrous temporels peuvent être utilisés pour invalider des engagements antérieurs, nous pouvons voir la différence entre fermer le canal de manière coopérative et le fermer unilatéralement en diffusant une transaction d&#39;engagement. Toutes les transactions d&#39;engagement sont verrouillées dans le temps, par conséquent, la diffusion d&#39;une transaction d&#39;engagement impliquera toujours d&#39;attendre jusqu&#39;à ce que le verrouillage ait expiré. Mais si les deux parties s&#39;entendent sur le solde final et savent qu&#39;elles détiennent toutes les deux des transactions d&#39;engagement qui feront éventuellement de ce solde une réalité, elles peuvent construire une transaction de règlement sans verrou temporel représentant ce même solde. Dans une clôture coopérative, l&#39;une ou l&#39;autre des parties prend la transaction d&#39;engagement la plus récente et construit une transaction de règlement qui est identique à tous points de vue, sauf qu&#39;elle omet le verrou temporel. Les deux parties peuvent signer cette transaction de règlement en sachant qu&#39;il n&#39;y a aucun moyen de tricher et d&#39;obtenir un solde plus favorable. En signant et en transmettant de manière coopérative la transaction de règlement, ils peuvent fermer le canal et racheter leur solde immédiatement. Dans le pire des cas, l&#39;une des parties peut être mesquine, refuser de coopérer et forcer l&#39;autre partie à conclure unilatéralement la transaction d&#39;engagement la plus récente. Mais s&#39;ils le font, ils doivent aussi attendre leurs fonds.<indexterm>
  <primary>&quot;&quot;</primary><secondary>startref=&quot;PSCtrust12&quot;</secondary>
</indexterm>
<indexterm>
  <primary>startref=&quot;PSCtrust12&quot;</primary>
</indexterm></simpara>
</section>
<section id="_engagements_révocables_asymétriques">
<title>Engagements révocables asymétriques</title>
<simpara><indexterm>
  <primary>&quot;canaux de paiement (d&#39;état)&quot;</primary><secondary>&quot;engagements révocables asymétriques&quot;</secondary><tertiary>id=&quot;PSCaymetric12&quot;</tertiary>
</indexterm>
<indexterm>
  <primary>&quot;engagements révocables asymétriques&quot;</primary><secondary>id=&quot;PSCaymetric12&quot;</secondary>
</indexterm>
<indexterm>
  <primary>id=&quot;PSCaymetric12&quot;</primary>
</indexterm>Une meilleure façon de gérer les états d&#39;engagement antérieurs est de les révoquer explicitement. Cependant, ce n&#39;est pas facile à réaliser. Une caractéristique clé du bitcoin est qu&#39;une fois qu&#39;une transaction est valide, elle reste valide et n&#39;expire pas. La seule façon d&#39;annuler une transaction est de doubler ses entrées avec une autre transaction avant qu&#39;elle ne soit minée. C&#39;est pourquoi nous avons utilisé des verrous temporels dans l&#39;exemple de canal de paiement simple ci-dessus pour nous assurer que les engagements les plus récents pourraient être dépensés avant que les engagements plus anciens ne soient valides. Cependant, l&#39;enchaînement des engagements dans le temps crée un certain nombre de contraintes qui rendent les canaux de paiement difficiles à utiliser.</simpara>
<simpara>Même si une transaction ne peut pas être annulée, elle peut être construite de manière à rendre son utilisation indésirable. Pour ce faire, nous donnons à chaque partie une <emphasis>clé de révocation</emphasis> qui peut être utilisée pour punir l&#39;autre partie si elle essaie de tricher. Ce mécanisme de révocation des opérations d&#39;engagement préalable a été initialement proposé dans le cadre du Lightning Network.</simpara>
<simpara>Pour expliquer les clés de révocation, nous allons construire un canal de paiement plus complexe entre deux échanges gérés par Hitesh et Irene. Hitesh et Irene gèrent respectivement des échanges de bitcoins en Inde et aux États-Unis. Les clients de l&#39;échange indien d&#39;Hitesh envoient souvent des paiements aux clients de l&#39;échange américain d&#39;Irene et vice versa. Actuellement, ces transactions se produisent sur la chaîne de blocs Bitcoin, mais cela signifie payer des frais et attendre plusieurs blocs pour les confirmations. La mise en place d&#39;un canal de paiement entre les bourses réduira considérablement les coûts et accélérera le flux des transactions.</simpara>
<simpara>Hitesh et Irene démarrent le canal en construisant en collaboration une transaction de financement, chacun finançant la chaîne avec 5 bitcoins.
Le solde initial est de 5 bitcoins pour Hitesh et de 5 bitcoins pour Irene. La transaction de financement verrouille l&#39;état du canal dans un multisig 2 sur 2, comme dans l&#39;exemple d&#39;un canal simple.</simpara>
<simpara>La transaction de financement peut avoir une ou plusieurs entrées de Hitesh (ajoutant jusqu&#39;à 5 bitcoins ou plus) et une ou plusieurs entrées d&#39;Irene (ajoutant jusqu&#39;à 5 bitcoins ou plus). Les entrées doivent légèrement dépasser la capacité du canal afin de couvrir les frais de transaction. La transaction a une sortie qui verrouille les 10 bitcoins au total sur une adresse multisig 2 sur 2 contrôlée à la fois par Hitesh et Irene. La transaction de financement peut également avoir une ou plusieurs sorties rendant la monnaie à Hitesh et Irene si leurs entrées ont dépassé leur contribution de canal prévue. Il s&#39;agit d&#39;une transaction unique avec des entrées offertes et signées par deux parties. Il doit être construit en collaboration et signé par chaque partie avant d&#39;être transmis.</simpara>
<simpara>Maintenant, au lieu de créer une transaction d&#39;engagement unique que les deux parties signent, Hitesh et Irene créent deux transactions d&#39;engagement différentes qui sont <emphasis>asymétriques</emphasis>.</simpara>
<simpara>Hitesh a une transaction d&#39;engagement avec deux sorties. La première sortie paie à Irene les 5 bitcoins qui lui sont dus <emphasis>immédiatement</emphasis>. La deuxième sortie paie à Hitesh les 5 bitcoins qui lui sont dus, mais seulement après un verrou temporel de 1000 blocs. Les sorties de transaction ressemblent à ceci :</simpara>
<screen>Input: 2-of-2 funding output, signed by Irene

Output 0 &lt;5 bitcoin&gt;:
    &lt;Irene's Public Key&gt; CHECKSIG

Output 1 &lt;5 bitcoin&gt;:
    &lt;1000 blocks&gt;
    CHECKSEQUENCEVERIFY
    DROP
    &lt;Hitesh's Public Key&gt; CHECKSIG</screen>
<simpara>Irène a une transaction d&#39;engagement différente avec deux sorties. La première sortie paie à Hitesh les 5 bitcoins qui lui sont dus immédiatement. La deuxième sortie paie à Irene les 5 bitcoins qui lui sont dus mais seulement après un verrou temporel de 1000 blocs. La transaction d&#39;engagement qu&#39;Irene détient (signée par Hitesh) ressemble à ceci :</simpara>
<screen>Entrée : sortie de financement 2 sur 2, signée par Hitesh

Output 0 &lt;5 bitcoin&gt;:
    &lt;Hitesh's Public Key&gt; CHECKSIG

Output 1 &lt;5 bitcoin&gt;:
    &lt;1000 blocks&gt;
    CHECKSEQUENCEVERIFY
    DROP
    &lt;Irene's Public Key&gt; CHECKSIG</screen>
<simpara>De cette façon, chaque partie a une transaction d&#39;engagement, dépensant la sortie de financement 2 sur 2. Cette entrée est signée par l&#39;_autre_ partie. À tout moment, la partie détenant la transaction peut également signer (remplir le 2 sur 2) et diffuser. Cependant, s&#39;ils diffusent la transaction d&#39;engagement, il paie immédiatement l&#39;autre partie alors qu&#39;elle doit attendre l&#39;expiration d&#39;un verrou temporel. En imposant un délai au remboursement de l&#39;une des sorties, nous désavantageons légèrement chaque partie lorsqu&#39;elle choisit de diffuser unilatéralement une opération d&#39;engagement. Mais un délai ne suffit pas à lui seul à encourager une conduite équitable.</simpara>
<simpara><xref linkend="asymmetric_commitments"/> montre deux opérations d&#39;engagement asymétriques, où la sortie payant le titulaire de l&#39;engagement est retardée.</simpara>
<figure id="asymmetric_commitments"><title>Deux opérations d&#39;engagement asymétriques avec paiement différé pour le titulaire de l&#39;opération</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_1205.png"/>
  </imageobject>
  <textobject><phrase>&quot;Deux opérations d&#39;engagement asymétriques avec retard de paiement pour le porteur de l&#39;opération&quot;</phrase></textobject>
</mediaobject>
</figure>
<simpara>Nous introduisons maintenant le dernier élément de ce schéma : une clé de révocation qui empêche un tricheur de diffuser un engagement expiré. La clé de révocation permet à la partie lésée de sanctionner le tricheur en prélevant tout le solde de la chaîne.</simpara>
<simpara>La clé de révocation est composée de deux secrets, chacun généré indépendamment par chaque participant du canal. Il est similaire à un multisig 2 sur 2, mais construit à l&#39;aide de l&#39;arithmétique de la courbe elliptique, de sorte que les deux parties connaissent la clé publique de révocation mais que chaque partie ne connaît que la moitié de la clé secrète de révocation.</simpara>
<simpara>À chaque tour, les deux parties révèlent leur moitié du secret de révocation à l&#39;autre partie, donnant ainsi à l&#39;autre partie (qui a maintenant les deux moitiés) les moyens de réclamer la sortie de pénalité si cette transaction révoquée est jamais diffusée.</simpara>
<simpara>Chacune des transactions d&#39;engagement a une sortie &quot;retardée&quot;. Le script de rachat pour cette sortie permet à une partie de la racheter après 1000 blocs, <emphasis>ou</emphasis> à l&#39;autre partie de la racheter si elle a une clé de révocation, pénalisant la transmission d&#39;un engagement révoqué.</simpara>
<simpara>Ainsi, lorsque Hitesh crée une transaction d&#39;engagement pour Irene à signer, il rend la deuxième sortie payable à lui-même après 1000 blocs, ou à la clé publique de révocation (dont il ne connaît que la moitié du secret). Hitesh construit cette transaction. Il ne révélera sa moitié du secret de révocation à Irène que lorsqu&#39;il sera prêt à passer à un nouvel état de canal et qu&#39;il voudra révoquer cet engagement.</simpara>
<simpara>Le script de la deuxième sortie ressemble à ceci :</simpara>
<screen>Output 0 &lt;5 bitcoin&gt;:
    &lt;Irene's Public Key&gt; CHECKSIG

Output 1 &lt;5 bitcoin&gt;:
IF
# Sortie de pénalité de révocation
    &lt;Revocation Public Key&gt;
ELSE
    &lt;1000 blocks&gt;
    CHECKSEQUENCEVERIFY
    DROP
    &lt;Hitesh's Public Key&gt;
ENDIF
CHECKSIG</screen>
<simpara>Irène peut signer cette transaction en toute confiance, car si elle est transmise, elle lui paiera immédiatement ce qui lui est dû. Hitesh détient la transaction, mais sait que s&#39;il la transmet dans une fermeture de canal unilatérale, il devra attendre 1000 blocs pour être payé.</simpara>
<simpara>Lorsque le canal passe à l&#39;état suivant, Hitesh doit <emphasis>révoquer</emphasis> cette transaction d&#39;engagement avant qu&#39;Irene n&#39;accepte de signer la prochaine transaction d&#39;engagement. Pour cela, il lui suffit d&#39;envoyer sa moitié de <emphasis>clé de révocation</emphasis> à Irène. Une fois qu&#39;Irene a les deux moitiés de la clé secrète de révocation pour cet engagement, elle peut signer le prochain engagement en toute confiance. Elle sait que si Hitesh essaie de tricher en publiant l&#39;engagement précédent, elle peut utiliser la clé de révocation pour racheter la sortie retardée de Hitesh. <emphasis>Si Hitesh triche, Irene obtient les DEUX sorties</emphasis>. Pendant ce temps, Hitesh n&#39;a que la moitié du secret de révocation pour cette clé publique de révocation et ne peut pas racheter la sortie avant 1000 blocs. Irene pourra racheter la sortie et punir Hitesh avant que les 1000 blocs ne se soient écoulés.</simpara>
<simpara>Le protocole de révocation est bilatéral, ce qui signifie qu&#39;à chaque tour, à mesure que l&#39;état du canal est avancé, les deux parties échangent de nouveaux engagements, échangent des secrets de révocation pour les engagements précédents et signent les nouvelles transactions d&#39;engagement de l&#39;autre. Au fur et à mesure qu&#39;ils acceptent un nouvel état, ils rendent l&#39;état antérieur inutilisable, en se donnant mutuellement les secrets de révocation nécessaires pour sanctionner toute tricherie.</simpara>
<simpara>Regardons un exemple de la façon dont cela fonctionne. L&#39;un des clients d&#39;Irene souhaite envoyer 2 bitcoins à l&#39;un des clients de Hitesh. Pour transmettre 2 bitcoins à travers le canal, Hitesh et Irene doivent faire avancer l&#39;état du canal pour refléter le nouvel équilibre. Ils s&#39;engageront dans un nouvel état (état numéro 2) où les 10 bitcoins de la chaîne sont divisés, 7 bitcoins pour Hitesh et 3 bitcoins pour Irene. Pour faire progresser l&#39;état du canal, ils créeront chacun de nouvelles transactions d&#39;engagement reflétant le nouveau solde du canal.</simpara>
<simpara>Comme auparavant, ces transactions d&#39;engagement sont asymétriques de sorte que la transaction d&#39;engagement que chaque partie détient les oblige à attendre si ils la remboursent. Surtout, avant de signer de nouvelles transactions d&#39;engagement, ils doivent d&#39;abord échanger des clés de révocation pour invalider l&#39;engagement précédent. Dans ce cas particulier, les intérêts de Hitesh sont alignés sur l&#39;état réel de la chaîne et il n&#39;a donc aucune raison de diffuser un état antérieur. Cependant, pour Irene, l&#39;état numéro 1 lui laisse un solde plus élevé que l&#39;état 2. Quand Irene donne à Hitesh la clé de révocation pour sa transaction d&#39;engagement précédente (état numéro 1), elle révoque effectivement sa capacité à tirer profit de la régression du canal vers un précédent. état parce qu&#39;avec la clé de révocation, Hitesh peut racheter sans délai les deux sorties de la transaction d&#39;engagement précédente. Cela signifie que si Irene diffuse l&#39;état antérieur, Hitesh peut exercer son droit de prendre toutes les sorties.</simpara>
<simpara>Il est important de noter que la révocation ne se produit pas automatiquement. Alors que Hitesh a la capacité de punir Irene pour avoir triché, il doit surveiller la blockchain avec diligence pour détecter des signes de tricherie. S&#39;il voit une diffusion d&#39;une transaction d&#39;engagement préalable, il dispose de 1000 blocs pour agir et utiliser la clé de révocation pour contrecarrer la tricherie d&#39;Irène et la punir en prenant la totalité du solde, les 10 bitcoins.</simpara>
<simpara>Les engagements révocables asymétriques avec blocages temporels relatifs (<literal>CSV</literal>) sont une bien meilleure façon de mettre en œuvre les canaux de paiement et une innovation très importante dans cette technologie. Avec cette construction, le canal peut rester ouvert indéfiniment et peut avoir des milliards de transactions d&#39;engagement intermédiaires. Dans les implémentations prototypes de Lightning Network, l&#39;état d&#39;engagement est identifié par un index de 48 bits, permettant plus de 281 000 milliards (2,8 x 10<superscript>14</superscript>) de transitions d&#39;état dans n&#39;importe quel canal !<indexterm>
  <primary>&quot;&quot;</primary><secondary>startref=&quot;PSCaymetric12&quot;</secondary>
</indexterm>
<indexterm>
  <primary>startref=&quot;PSCaymetric12&quot;</primary>
</indexterm></simpara>
</section>
<section id="_contrats_de_verrouillage_du_temps_de_hachage_htlc">
<title>Contrats de verrouillage du temps de hachage (HTLC)</title>
<simpara><indexterm>
  <primary>&quot;Hash Time Lock Contracts Contrats de verrouillage du temps de hachage (HTLC)&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;canaux de paiements (d&#8217;état)&quot;</primary><secondary>&quot;Hash Time Lock Contracts Contrats de verrouillage du temps de hachage (HTLC)&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;Hash Time Lock Contracts Contrats de verrouillage du temps de hachage (HTLC)&quot;</primary>
</indexterm>Les canaux de paiement peuvent être encore étendus avec un type spécial de contrat intelligent qui permet aux participants d&#39;engager des fonds dans un secret remboursable, avec un délai d&#39;expiration. Cette fonctionnalité est appelée <emphasis>contrats de verrouillage du temps de hachage</emphasis> (<emphasis>Hash Time Lock Contract</emphasis>), ou <emphasis>HTLC</emphasis>, et est utilisée à la fois dans les canaux de paiement bidirectionnels et routés.</simpara>
<simpara>Expliquons d&#39;abord la partie &quot;hachage&quot; du HTLC. Pour créer un HTLC, le destinataire prévu du paiement créera d&#39;abord un <literal>R</literal> secret. Ils calculent ensuite le hash de ce secret <literal>H</literal> :</simpara>
<screen>H = Hachage(R)</screen>
<simpara>Cela produit un hachage <literal>H</literal> qui peut être inclus dans le script de verrouillage d&#39;une sortie. Celui qui connaît le secret peut l&#39;utiliser pour racheter la sortie. Le secret <literal>R</literal> est également appelé <emphasis>préimage</emphasis> pour la fonction de hachage. La préimage est simplement la donnée utilisée comme entrée dans une fonction de hachage.</simpara>
<simpara>La deuxième partie d&#39;un HTLC est le composant &quot;verrou temporel&quot;. Si le secret n&#39;est pas révélé, le payeur du HTLC peut obtenir un &quot;remboursement&quot; après un certain temps. Ceci est réalisé avec un verrouillage temporel absolu à l&#39;aide de <literal>CHECKLOCKTIMEVERIFY</literal>.</simpara>
<simpara>Le script implémentant un HTLC pourrait ressembler à ceci :</simpara>
<screen>IF
# Paiement si vous avez le secret R
    HASH160 &lt;H&gt; EQUALVERIFY
ELSE
# Remboursement après expiration du délai.
    &lt;locktime&gt; CHECKLOCKTIMEVERIFY DROP
    &lt;Payer Public Key&gt; CHECKSIG
ENDIF</screen>
<simpara>Toute personne connaissant le secret <literal>R</literal>, qui, lorsqu&#39;il est haché, est égal à <literal>H</literal>, peut racheter cette sortie en exerçant la première clause du flux <literal>IF</literal>.</simpara>
<simpara>Si le secret n&#39;est pas révélé et que le HTLC est réclamé, après un certain nombre de blocages, le payeur peut demander un remboursement en utilisant la deuxième clause du flux <literal>IF</literal>.</simpara>
<simpara>Il s&#39;agit d&#39;une implémentation de base d&#39;un HTLC. Ce type de HTLC peut être échangé par <emphasis>toute personne</emphasis> qui a le secret <literal>R</literal>. Un HTLC peut prendre de nombreuses formes différentes avec de légères variations dans le script. Par exemple, l&#39;ajout d&#39;un opérateur <literal>CHECKSIG</literal> et d&#39;une clé publique dans la première clause limite le rachat du hachage à un destinataire nommé, qui doit également connaître le secret <literal>R</literal>.<indexterm>
  <primary>&quot;&quot;</primary><secondary>startref=&quot;BCApayment12&quot;</secondary>
</indexterm>
<indexterm>
  <primary>startref=&quot;BCApayment12&quot;</primary>
</indexterm></simpara>
</section>
</section>
<section id="lightning_network">
<title>Canaux de paiement routés (Lightning Network)</title>
<simpara><indexterm>
  <primary>&quot;applications de chaîne de blocs&quot;</primary><secondary>&quot;canaux de paiement routés&quot;</secondary><tertiary>seealso=&quot;Lightning Network&quot;</tertiary>
</indexterm>
<indexterm>
  <primary>&quot;canaux de paiement routés&quot;</primary><secondary>seealso=&quot;Lightning Network&quot;</secondary>
</indexterm>
<indexterm>
  <primary>seealso=&quot;Lightning Network&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;canaux de paiement routés&quot;</primary><secondary>see=&quot;Lightning Network&quot;</secondary>
</indexterm>
<indexterm>
  <primary>see=&quot;Lightning Network&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;Lightning Network&quot;</primary><secondary>&quot;défini&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;défini&quot;</primary>
</indexterm> Le Lightning Network est un réseau routé proposé de canaux de paiement bidirectionnels connectés de bout en bout. Un tel réseau peut permettre à n&#39;importe quel participant d&#39;acheminer un paiement d&#39;un canal à l&#39;autre sans faire confiance à aucun des intermédiaires. Le Lightning Network était <ulink url="https://lightning.network/lightning-network-paper.pdf">https://lightning.network/lightning-network-paper.pdf</ulink> [décrit pour la première fois par Joseph Poon et Thadeus Dryja en février 2015], s&#39;appuyant sur le concept de canaux de paiement tel que proposé et élaboré par de nombreux autres.</simpara>
<simpara>Le &quot;Lightning Network&quot; fait référence à une conception spécifique pour un réseau de canaux de paiement routés, qui a maintenant été mis en œuvre par au moins cinq équipes de sources libres différentes. <indexterm>
  <primary>&quot;bases du Lightning Technology (BOLT)&quot;</primary>
</indexterm>Les implémentations indépendantes sont coordonnées par un ensemble de normes d&#39;interopérabilité décrites dans le <ulink url="https://bit.ly/2rBHeoL">document <emphasis>Basics of Lightning Technology (BOLT)</emphasis></ulink>.</simpara>
<simpara>Des implémentations prototypes du Lightning Network ont été publiées par plusieurs équipes.</simpara>
<simpara>Le Lightning Network est une possibilité de mise en place de canaux de paiement routés. Il existe plusieurs autres conceptions qui visent à atteindre des objectifs similaires, telles que Teechan et Tumblebit.</simpara>
<section id="_exemple_de_réseau_lightning_de_base">
<title>Exemple de réseau Lightning de base</title>
<simpara><indexterm>
  <primary>&quot;Lightning Network&quot;</primary><secondary>&quot;exemple de base&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;exemple de base&quot;</primary>
</indexterm> Voyons comment cela fonctionne.</simpara>
<simpara>Dans cet exemple, nous avons cinq participants : Alice, Bob, Carol, Diana et Eric. Ces cinq participants ont ouvert des canaux de paiement entre eux, par paires. Alice a un canal de paiement avec Bob. Bob est connecté à Carol, Carol à Diana et Diana à Eric. Pour simplifier, supposons que chaque chaîne est financée avec 2 bitcoins par chaque participant, pour une capacité totale de 4 bitcoins dans chaque chaîne.</simpara>
<simpara><xref linkend="lightning_network_fig"/> montre cinq participants dans un Lightning Network, connectés par des canaux de paiement bidirectionnels qui peuvent être liés pour effectuer un paiement d&#39;Alice à Eric (<xref linkend="lightning_network"/>).</simpara>
<figure id="lightning_network_fig"><title>Une série de canaux de paiement bidirectionnels liés pour former un réseau Lightning qui peut acheminer un paiement d&#39;Alice à Eric</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_1206.png"/>
  </imageobject>
  <textobject><phrase>&quot;Une série de canaux de paiement bidirectionnels liés pour former un Lightning Network&quot;</phrase></textobject>
</mediaobject>
</figure>
<simpara>Alice veut payer Eric 1 bitcoin. Cependant, Alice n&#39;est pas connectée à Eric par un canal de paiement. La création d&#39;un canal de paiement nécessite une transaction de financement, qui doit être engagée dans la chaîne de blocs Bitcoin. Alice ne veut pas ouvrir un nouveau canal de paiement et engager davantage de ses fonds. Y a-t-il un moyen de payer Eric, indirectement ?</simpara>
<simpara><xref linkend="ln_payment_process"/> montre le processus étape par étape d&#39;acheminement d&#39;un paiement d&#39;Alice à Eric, à travers une série d&#39;engagements HTLC sur les canaux de paiement reliant les participants.</simpara>
<formalpara id="ln_payment_process"><title>Acheminement des paiements étape par étape via un réseau Lightning</title><para>image ::images/mbc2_1207.png[&quot;Acheminement des paiements étape par étape via un réseau Lightning&quot;]</para></formalpara>
<simpara>Alice exécute un nœud Lightning Network (LN) qui assure le suivi de son canal de paiement vers Bob et a la capacité de découvrir des itinéraires entre les canaux de paiement. Le nœud LN d&#39;Alice a également la capacité de se connecter via Internet au nœud LN d&#39;Eric. Le nœud LN d&#39;Eric crée un <literal>R</literal> secret à l&#39;aide d&#39;un générateur de nombres aléatoires. Le noeud d&#39;Eric ne révèle ce secret à personne. Au lieu de cela, le nœud d&#39;Eric calcule un hachage <literal>H</literal> du secret <literal>R</literal> et transmet ce hachage au nœud d&#39;Alice (voir <xref linkend="ln_payment_process"/> étape 1).</simpara>
<simpara>Maintenant, le nœud LN d&#39;Alice construit une route entre le nœud LN d&#39;Alice et le nœud LN d&#39;Eric. L&#39;algorithme de routage utilisé sera examiné plus en détail plus tard, mais pour l&#39;instant supposons que le nœud d&#39;Alice puisse trouver une route efficace.</simpara>
<simpara>Le nœud d&#39;Alice construit alors un HTLC, payable au hash <literal>H</literal>, avec un délai de remboursement de 10 blocs (bloc actuel + 10), pour un montant de 1,003 bitcoin (voir <xref linkend="ln_payment_process"/> étape 2). Le supplément de 0,003 sera utilisé pour compenser les nœuds intermédiaires pour leur participation à cette voie de paiement. Alice offre ce HTLC à Bob, déduisant 1,003 bitcoin de son solde de canal avec Bob et l&#39;engageant sur le HTLC. Le HTLC a la signification suivante : <emphasis>&quot;Alice engage 1,003 de son solde de canal à payer à Bob si Bob connaît le secret, ou remboursé sur le solde d&#39;Alice si 10 blocs s&#39;écoulent.&quot;</emphasis> Le solde de canal entre Alice et Bob est maintenant exprimé par des transactions d&#39;engagement avec trois sorties : solde de 2 bitcoins à Bob, solde de 0,997 bitcoin à Alice, 1,003 bitcoin engagé dans le HTLC d&#39;Alice. Le solde d&#39;Alice est réduit du montant engagé dans le HTLC.</simpara>
<simpara>Bob s&#39;est maintenant engagé à ce que s&#39;il parvient à obtenir le secret + R + dans les 10 prochains blocs, il puisse réclamer les 1,003 verrouillés par Alice. Avec cet engagement en main, le nœud de Bob construit un HTLC sur son canal de paiement avec Carol. Le HTLC de Bob engage 1,002 bitcoin dans le hachage <literal>H</literal> pendant 9 blocs, que Carol peut échanger si elle a le secret <literal>R</literal> (voir <xref linkend="ln_payment_process"/> étape 3). Bob sait que si Carol peut réclamer son HTLC, elle doit produire <literal>R</literal>. Si Bob a + R + dans neuf blocs, il peut l&#39;utiliser pour lui réclamer le HTLC d&#39;Alice. Il gagne également 0,001 bitcoin pour avoir engagé le solde de son canal pendant neuf blocs. Si Carol n&#39;est pas en mesure de réclamer son HTLC et qu&#39;il ne peut pas réclamer le HTLC d&#39;Alice, tout revient aux soldes de canal précédents et personne n&#39;est à perte. L&#39;équilibre des canaux entre Bob et Carol est maintenant : 2 pour Carol, 0,998 pour Bob, 1,002 commis par Bob pour le HTLC.</simpara>
<simpara>Carol s&#39;est maintenant engagée à ce que si elle obtient <literal>R</literal> dans les neuf prochains blocs, elle puisse réclamer 1,002 bitcoin verrouillé par Bob. Elle peut désormais s&#39;engager sur HTLC sur sa chaîne avec Diana. Elle engage un HTLC de 1.001 bitcoin au hachage <literal>H</literal>, pour huit blocs, que Diana peut racheter si elle a le secret <literal>R</literal> (voir <xref linkend="ln_payment_process"/> étape 4). Du point de vue de Carol, si cela fonctionne, elle est plus riche de 0,001 bitcoin et si ce n&#39;est pas le cas, elle ne perd rien. Son HTLC à Diana n&#39;est viable que si <literal>R</literal> est révélé, auquel cas elle peut réclamer le HTLC à Bob. L&#39;équilibre des canaux entre Carol et Diana est désormais : 2 pour Diana, 0,999 pour Carol, 1,001 commis par Carol pour le HTLC.</simpara>
<simpara>Enfin, Diana peut proposer un HTLC à Eric, engageant 1 bitcoin pour sept blocs à hacher <literal>H</literal> (voir <xref linkend="ln_payment_process"/> étape 5). L&#39;équilibre des canaux entre Diana et Eric est maintenant : 2 à Eric, 1 à Diana, 1 commis par Diana au HTLC.</simpara>
<simpara>Cependant, à ce saut dans la route, Eric <emphasis>a</emphasis> le secret <literal>R</literal>. Il peut donc prétendre au HTLC proposé par Diana. Il envoie <literal>R</literal> à Diana et réclame le 1 bitcoin, l&#39;ajoutant au solde de son canal (voir <xref linkend="ln_payment_process"/> étape 6). L&#39;équilibre des canaux est maintenant : 1 pour Diana, 3 pour Eric.</simpara>
<simpara>Maintenant, Diana a un <literal>R</literal> secret. Par conséquent, elle peut désormais réclamer le HTLC à Carol. Diana transmet <literal>R</literal> à Carol et ajoute le bitcoin 1.001 au solde de son canal (voir <xref linkend="ln_payment_process"/> étape 7). Maintenant, l&#39;équilibre des canaux entre Carol et Diana est : 0,999 pour Carol, 3,001 pour Diana. Diana a &quot;gagné&quot; 0,001 pour sa participation à cette voie de paiement.</simpara>
<simpara>En revenant sur le parcours, le secret <literal>R</literal> permet à chaque participant de réclamer les HTLC restants. Carol réclame 1,002 à Bob, fixant le solde sur leur chaîne à : 0,998 à Bob, 3,002 à Carol (voir <xref linkend="ln_payment_process"/> étape 8). Enfin, Bob revendique le HTLC d&#39;Alice (voir <xref linkend="ln_payment_process"/> étape 9). Leur solde de canaux est mis à jour comme suit : 0,997 pour Alice, 3,003 pour Bob.</simpara>
<simpara>Alice a payé Eric 1 bitcoin sans ouvrir de chaîne à Eric. Aucune des parties intermédiaires de la voie de paiement n&#39;avait à se faire confiance. Pour l&#39;engagement à court terme de leurs fonds dans le canal, ils peuvent gagner une petite commission, le seul risque étant un léger retard de remboursement si le canal était fermé ou si le paiement acheminé échouait.</simpara>
</section>
<section id="_transport_et_routage_du_lightning_network">
<title>Transport et routage du Lightning Network</title>
<simpara><indexterm>
  <primary>&quot;Lightning Network&quot;</primary><secondary>&quot;transport et routage&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;transport et routage&quot;</primary>
</indexterm>Toutes les communications entre les nœuds LN sont cryptées point à point. De plus, les nœuds ont une clé publique à long terme qu&#39;ils utilisent comme identifiant et pour s&#39;authentifier les uns les autres.</simpara>
<simpara>Chaque fois qu&#39;un nœud souhaite envoyer un paiement à un autre nœud, il doit d&#39;abord construire un <emphasis>chemin</emphasis> à travers le réseau en connectant des canaux de paiement avec une capacité suffisante. Les nœuds annoncent les informations de routage, y compris les canaux qu&#39;ils ont ouverts, la capacité de chaque canal et les frais qu&#39;ils facturent pour acheminer les paiements. Les informations de routage peuvent être partagées de diverses manières et différents protocoles de routage sont susceptibles d&#39;émerger à mesure que la technologie Lightning Network progresse. Certaines implémentations de Lightning Network utilisent le protocole IRC comme mécanisme pratique permettant aux nœuds d&#39;annoncer les informations de routage. Une autre implémentation de la découverte de route utilise un modèle P2P où les nœuds propagent les annonces de canal à leurs pairs, dans un modèle d'&quot;inondation&quot;, similaire à la façon dont bitcoin propage les transactions. Les plans futurs incluent une proposition appelée <ulink url="https://bit.ly/2r5TACm">Flare</ulink>, qui est un modèle de routage hybride avec des &quot;quartiers&quot; de nœuds locaux et des nœuds de balise à plus longue portée.</simpara>
<simpara>Dans notre exemple précédent, le nœud d&#39;Alice utilise l&#39;un de ces mécanismes de découverte de route pour trouver un ou plusieurs chemins reliant son nœud au nœud d&#39;Eric. Une fois que le nœud d&#39;Alice a construit un chemin, elle initialisera ce chemin à travers le réseau, en propageant une série d&#39;instructions cryptées et imbriquées pour connecter chacun des canaux de paiement adjacents.</simpara>
<simpara>Il est important de noter que ce chemin n&#39;est connu que du nœud d&#39;Alice. Tous les autres participants de la route de paiement ne voient que les nœuds adjacents. Du point de vue de Carol, cela ressemble à un paiement de Bob à Diana. Carol ne sait pas que Bob transmet en fait un paiement d&#39;Alice. Elle ne sait pas non plus que Diana transmettra un paiement à Eric.</simpara>
<simpara>Il s&#39;agit d&#39;une fonctionnalité essentielle du Lightning Network, car elle garantit la confidentialité des paiements et rend très difficile l&#39;application de la surveillance, de la censure ou des listes noires. Mais comment Alice établit-elle ce chemin de paiement, sans rien révéler aux nœuds intermédiaires ?</simpara>
<simpara>Le Lightning Network implémente un protocole de routage en oignon basé sur un schéma appelé <ulink url="https://bit.ly/2q6ZDrP">Sphinx</ulink>. Ce protocole de routage garantit qu&#39;un expéditeur de paiement peut construire et communiquer un chemin à travers le Lightning Network tel que :</simpara>
<itemizedlist>
<listitem>
<simpara>
Les nœuds intermédiaires peuvent vérifier et décrypter leur portion d&#39;informations de route et trouver le saut suivant.
</simpara>
</listitem>
<listitem>
<simpara>
À part les sauts précédents et suivants, ils ne peuvent pas en savoir plus sur les autres nœuds faisant partie du chemin.
</simpara>
</listitem>
<listitem>
<simpara>
Ils ne peuvent pas identifier la longueur du chemin de paiement, ni leur propre position dans ce chemin.
</simpara>
</listitem>
<listitem>
<simpara>
Chaque partie du chemin est cryptée de telle manière qu&#39;un attaquant au niveau du réseau ne peut pas associer les paquets de différentes parties du chemin les uns aux autres.
</simpara>
</listitem>
<listitem>
<simpara>
Contrairement à Tor (un protocole d&#39;anonymisation routé par couches d&#8217;oignon sur Internet), il n&#39;y a pas de &quot;nœuds de sortie&quot; qui peuvent être placés sous surveillance. Les paiements n&#39;ont pas besoin d&#39;être transmis à la chaîne de blocs Bitcoin ; les nœuds mettent simplement à jour les soldes des canaux.
</simpara>
</listitem>
</itemizedlist>
<simpara>En utilisant ce protocole routé en couches d&#8217;oignon, Alice enveloppe chaque élément du chemin dans une couche de cryptage, en commençant par la fin et en remontant. Elle crypte un message à Eric avec la clé publique d&#39;Eric. Ce message est enveloppé dans un message crypté pour Diana, identifiant Eric comme le prochain destinataire. Le message à Diana est enveloppé dans un message crypté avec la clé publique de Carol et identifiant Diana comme le prochain destinataire. Le message à Carol est crypté avec la clé de Bob. Ainsi, Alice a construit cet &quot;oignon&quot; multicouche chiffré de messages. Elle l&#39;envoie à Bob, qui ne peut que déchiffrer et déballer la couche externe. À l&#39;intérieur, Bob trouve un message adressé à Carol qu&#39;il peut transmettre à Carol mais ne peut pas se déchiffrer. En suivant le chemin, les messages sont transférés, décryptés, transférés, etc., jusqu&#39;à Eric. Chaque participant ne connaît que le nœud précédent et suivant dans chaque saut.<indexterm>
  <primary>&quot;&quot;</primary><secondary>startref=&quot;alicetwelve&quot;</secondary>
</indexterm>
<indexterm>
  <primary>startref=&quot;alicetwelve&quot;</primary>
</indexterm></simpara>
<simpara>Chaque élément du chemin contient des informations sur le HTLC qui doivent être étendues au saut suivant, le montant qui est envoyé, les frais à inclure et l&#39;expiration du temps de verrouillage CLTV (en blocs) du HTLC. Au fur et à mesure que les informations de route se propagent, les nœuds effectuent des engagements HTLC jusqu&#39;au saut suivant.</simpara>
<simpara>À ce stade, vous vous demandez peut-être comment il est possible que les nœuds ne connaissent pas la longueur du chemin et leur position dans ce chemin. Après tout, ils reçoivent un message et le transmettent au saut suivant. Ne devient-il pas plus court, leur permettant de déduire la taille du chemin et leur position ? Pour éviter cela, le chemin est toujours fixé à 20 sauts et rempli de données aléatoires. Chaque nœud voit le saut suivant et un message chiffré de longueur fixe à transmettre. Seul le destinataire final voit qu&#39;il n&#39;y a pas de saut suivant. Pour tout le monde, il semble qu&#39;il y ait toujours 20 sauts de plus à faire.</simpara>
</section>
<section id="_avantages_du_lightning_network">
<title>Avantages du Lightning Network</title>
<simpara><indexterm>
  <primary>&quot;Lightning Network&quot;</primary><secondary>&quot;avantages de&quot;</secondary>
</indexterm>
<indexterm>
  <primary>&quot;avantages de&quot;</primary>
</indexterm>Un Lightning Network est une technologie de routage de deuxième couche. Il peut être appliqué à toute chaîne de blocs prenant en charge certaines fonctionnalités de base, telles que les transactions multisignatures, les verrous temporels et les contrats intelligents de base.</simpara>
<simpara>Si un réseau Lightning est superposé au réseau Bitcoin, le réseau Bitcoin peut bénéficier d&#39;une augmentation significative de la capacité, de la confidentialité, de la granularité et de la vitesse, sans sacrifier les principes de fonctionnement sans confiance sans intermédiaires :</simpara>
<variablelist>
<varlistentry>
<term>
Confidentialité 
</term>
<listitem>
<simpara>
Les paiements Lightning Network sont beaucoup plus privés que les paiements sur la chaîne de blocs Bitcoin, car ils ne sont pas publics. Bien que les participants à une route puissent voir les paiements se propager sur leurs canaux, ils ne connaissent ni l&#39;expéditeur ni le destinataire.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Fongibilité
</term>
<listitem>
<simpara>
Un Lightning Network rend beaucoup plus difficile l&#39;application de la surveillance et des listes noires sur le bitcoin, augmentant la fongibilité de la monnaie.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Vitesse
</term>
<listitem>
<simpara>
Les transactions Bitcoin utilisant Lightning Network sont réglées en millisecondes, plutôt qu&#39;en minutes, car les HTLC sont effacés sans valider les transactions dans un bloc.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Granularité
</term>
<listitem>
<simpara>
Un réseau Lightning peut permettre des paiements au moins aussi petits que la limite de &quot;poussière&quot; de bitcoin, peut-être même plus petite. Certaines propositions permettent des incréments subsatoshi.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Capacité
</term>
<listitem>
<simpara>
Un Lightning Network augmente la capacité du système Bitcoin de plusieurs ordres de grandeur. Il n&#39;y a pas de limite supérieure pratique au nombre de paiements par seconde pouvant être acheminés sur un réseau Lightning, car cela dépend uniquement de la capacité et de la vitesse de chaque nœud.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Fonctionnement sans confiance
</term>
<listitem>
<simpara>
Un réseau Lightning utilise des transactions bitcoin entre des nœuds qui fonctionnent comme des pairs sans se faire confiance. Ainsi, un Lightning Network préserve les principes du système Bitcoin, tout en élargissant considérablement ses paramètres de fonctionnement.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Bien sûr, comme mentionné précédemment, le protocole Lightning Network n&#39;est pas le seul moyen de mettre en œuvre des canaux de paiement routés. D&#39;autres systèmes proposés incluent Tumblebit et Teechan. À l&#39;heure actuelle, cependant, le Lightning Network a déjà été déployé sur testnet. Plusieurs équipes différentes ont développé des implémentations concurrentes de LN et travaillent à une norme d&#39;interopérabilité commune (appelée BOLT). Il est probable que Lightning Network sera le premier réseau de canaux de paiement routés à être déployé en production.<indexterm>
  <primary>&quot;&quot;</primary><secondary>startref=&quot;BCAlightning12&quot;</secondary>
</indexterm>
<indexterm>
  <primary>startref=&quot;BCAlightning12&quot;</primary>
</indexterm></simpara>
<simpara>===Conclusion</simpara>
<simpara>Nous n&#39;avons examiné que quelques-unes des applications émergentes qui peuvent être construites en utilisant la chaîne de blocs Bitcoin comme plate-forme de confiance. Ces applications élargissent la portée du bitcoin au-delà des paiements et au-delà des instruments financiers, pour englober de nombreuses autres applications où la confiance est essentielle. En décentralisant la base de confiance, la chaîne de blocs Bitcoin est une plate-forme qui engendrera de nombreuses applications révolutionnaires dans une grande variété d&#39;industries.</simpara>
</section>
</section>
</section>
</article>
