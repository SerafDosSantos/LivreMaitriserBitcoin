<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<articleinfo>
    <date>2022-03-17</date>
</articleinfo>
<appendix id="satoshi_whitepaper">
<title>Le livre blanc Bitcoin de Satoshi Nakamoto</title>
<note>
<simpara><indexterm>
  <primary>&quot;livre blanc&quot;</primary><secondary>id=&quot;whitethirteen&quot;</secondary>
</indexterm>
<indexterm>
  <primary>id=&quot;whitethirteen&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;livre blanc bitcoin&quot;</primary><secondary>id=&quot;BCwhitethirteen&quot;</secondary>
</indexterm>
<indexterm>
  <primary>id=&quot;BCwhitethirteen&quot;</primary>
</indexterm><indexterm>
  <primary>&quot;Nakamoto</primary><secondary>Satoshi&quot;</secondary><tertiary>id=&quot;nakamatothirteen&quot;</tertiary>
</indexterm>
<indexterm>
  <primary>Satoshi&quot;</primary><secondary>id=&quot;nakamatothirteen&quot;</secondary>
</indexterm>
<indexterm>
  <primary>id=&quot;nakamatothirteen&quot;</primary>
</indexterm>Ceci est le livre blanc original, reproduit dans son intégralité exactement tel qu&#39;il a été publié par Satoshi Nakamoto en octobre 2008 et traduit (par assistance informatique) par Serafim Dos Santos en 2022 pour l&#8217;édition ouverte de <emphasis>Maîtriser Bitcoin</emphasis> (voir version originale <emphasis>Mastering Bitcoin</emphasis>).</simpara>
</note>
<section id="_bitcoin_un_système_de_paiement_électronique_pair_à_pair">
<title>Bitcoin - Un système de paiement électronique pair à pair</title>
<simpara>Satoshi Nakamoto</simpara>
<simpara><emphasis>satoshin@gmx.com</emphasis></simpara>
<simpara><a href="https://bitcoin.org/en/" class="orm:hideurl"><em>www.bitcoin.org</em></a></simpara>
<simpara><emphasis role="strong">Résumé.</emphasis> Une version purement pair à pair de la monnaie électronique permettrait d&#39;envoyer des paiements en ligne directement d&#39;une partie à une autre sans passer par une institution financière. Les signatures numériques fournissent une partie de la solution, mais les principaux avantages sont perdus si un tiers de confiance est toujours requis pour éviter les doubles dépenses. Nous proposons une solution au problème de la double dépense en utilisant un réseau pair à pair. Le réseau horodate les transactions en les hachant dans une chaîne continue de preuves de travail (proof-of-work) basées sur le hachage, formant un enregistrement qui ne peut pas être modifié sans refaire la preuve de travail. La chaîne la plus longue sert non seulement de preuve de la séquence d&#39;événements observés, mais aussi de preuve qu&#39;elle provient du plus grand bassin de puissance CPU. Tant que la majorité de la puissance du processeur est contrôlée par des nœuds qui ne coopèrent pas pour attaquer le réseau, ils généreront la plus longue chaîne et devanceront les attaquants. Le réseau lui-même nécessite une structure minimale. Les messages sont diffusés dans la mesure du possible, et les nœuds peuvent quitter et rejoindre le réseau à volonté, acceptant la plus longue chaîne de preuve de travail comme preuve de ce qui s&#39;est passé pendant leur absence.</simpara>
<section id="_introduction">
<title>Introduction</title>
<simpara>Le commerce sur Internet en est venu à s&#39;appuyer presque exclusivement sur des institutions financières servant de tiers de confiance pour traiter les paiements électroniques. Bien que le système fonctionne assez bien pour la plupart des transactions, il souffre toujours des faiblesses inhérentes au modèle basé sur la confiance. Les transactions totalement irréversibles ne sont pas vraiment possibles, car les institutions financières ne peuvent éviter la médiation des différends. Le coût de la médiation augmente les coûts de transaction, limitant la taille pratique minimale des transactions et supprimant la possibilité de petites transactions occasionnelles, et il y a un coût plus important dans la perte de capacité à effectuer des paiements irréversibles pour des services irréversibles. Avec la possibilité d&#39;inversion, le besoin de confiance se répand. Les commerçants doivent se méfier de leurs clients et les harceler pour obtenir plus d&#39;informations qu&#39;ils n&#39;en auraient autrement besoin. Un certain pourcentage de fraude est accepté comme inévitable. Ces coûts et incertitudes de paiement peuvent être évités en personne en utilisant de la monnaie physique, mais aucun mécanisme n&#39;existe pour effectuer des paiements via un canal de communication sans une partie de confiance.</simpara>
<simpara>Ce qu&#39;il faut, c&#39;est un système de paiement électronique basé sur la preuve cryptographique au lieu de la confiance, permettant à deux parties consentantes d&#39;effectuer des transactions directement l&#39;une avec l&#39;autre sans avoir besoin d&#39;un tiers de confiance. Les transactions impossibles à annuler sur le plan informatique protégeraient les vendeurs contre la fraude, et des mécanismes de séquestre de routine pourraient facilement être mis en œuvre pour protéger les acheteurs. Dans cet article, nous proposons une solution au problème de la double dépense en utilisant un serveur d&#39;horodatage distribué pair à pair pour générer une preuve informatique de l&#39;ordre chronologique des transactions. Le système est sécurisé tant que les nœuds honnêtes contrôlent collectivement plus de puissance CPU que n&#39;importe quel groupe coopérant de nœuds attaquants.</simpara>
</section>
<section id="_transactions">
<title>Transactions</title>
<simpara>Nous définissons une pièce électronique (ou unité de cryptomonnaie) comme une chaîne de signatures numériques. Chaque propriétaire transfère la pièce au suivant en signant numériquement un résultat de hachage de la transaction précédente et la clé publique du propriétaire suivant et en les ajoutant à la fin de la pièce. Un bénéficiaire peut vérifier les signatures pour vérifier la chaîne de propriété.</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_abin01.png"/>
  </imageobject>
  <textobject><phrase>Transactions</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Le problème est bien sûr que le bénéficiaire ne peut pas vérifier que l&#39;un des propriétaires n&#39;a pas dépensé deux fois la pièce. Une solution courante consiste à introduire une autorité centrale de confiance, ou "maison ou hôtel de la monnaie", qui vérifie chaque transaction pour les doubles dépenses. Après chaque transaction, la pièce doit être retournée à l&#8217;hôtel de la monnaie pour émettre une nouvelle pièce, et seules les pièces émises directement par l&#8217;hôtel de la monnaie sont réputées ne pas être dépensées en double. Le problème avec cette solution est que le sort de l&#39;ensemble du système monétaire dépend de la société qui gère la monnaie, chaque transaction devant passer par elle, tout comme une banque.</simpara>
<simpara>Nous avons besoin d&#39;un moyen pour que le bénéficiaire sache que les propriétaires précédents n&#39;ont signé aucune transaction antérieure. Pour nos besoins, la première transaction est celle qui compte, donc nous ne nous soucions pas des tentatives ultérieures de doubler les dépenses. La seule façon de confirmer l&#39;absence d&#39;une transaction est d&#39;être au courant de toutes les transactions. Dans le modèle basé sur la monnaie, la monnaie était au courant de toutes les transactions et décidait laquelle arrivait en premier. Pour y parvenir sans partie de confiance, les transactions doivent être annoncées publiquement [1], et nous avons besoin d&#39;un système permettant aux participants de s&#39;entendre sur un historique unique de l&#39;ordre dans lequel elles ont été reçues. Le bénéficiaire doit avoir la preuve qu&#39;au moment de chaque transaction, la majorité des nœuds ont convenu qu&#39;il s&#39;agissait du premier reçu.</simpara>
</section>
<section id="_serveur_d_39_horodatage">
<title>Serveur d&#39;horodatage</title>
<simpara>La solution que nous proposons commence par un serveur d&#39;horodatage. Un serveur d&#39;horodatage fonctionne en prenant un hachage d&#39;un bloc d&#39;éléments à horodater et en publiant largement le hachage, comme dans un journal ou une publication Usenet [2-5]. L&#39;horodatage prouve que les données doivent avoir existé à l&#39;époque, évidemment, pour entrer dans le hachage. Chaque horodatage inclut l&#39;horodatage précédent dans son hachage, formant une chaîne où chaque horodatage supplémentaire renforce ceux qui le précèdent.</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_abin02.png"/>
  </imageobject>
  <textobject><phrase>timestamp server</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section id="_proof_of_work_ou_preuve_de_travail">
<title>Proof-of-Work (ou Preuve de travail)</title>
<simpara>Pour implémenter un serveur d&#39;horodatage distribué sur une base pair à pair, nous devrons utiliser un système de preuve de travail similaire à Hashcash d&#39;Adam Back [6], plutôt que des articles de journaux ou Usenet. La preuve de travail implique la recherche d&#39;une valeur qui, lorsqu&#39;elle est hachée, comme avec SHA-256, le hachage commence par un certain nombre de bits zéro. Le travail moyen requis est exponentiel dans le nombre de bits zéro requis et peut être vérifié en exécutant un seul hachage. Pour notre réseau d&#39;horodatage, nous implémentons la preuve de travail en incrémentant un nonce dans le bloc jusqu&#39;à ce qu&#39;une valeur soit trouvée qui donne au hachage du bloc les bits zéro requis. Une fois que l&#39;effort CPU a été dépensé pour satisfaire la preuve de travail, le bloc ne peut pas être modifié sans refaire le travail. Comme les blocs ultérieurs sont enchaînés après celui-ci, le travail de modification du bloc comprendrait la refonte de tous les blocs après celui-ci.</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_abin03.png"/>
  </imageobject>
  <textobject><phrase>pow</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>La preuve de travail résout également le problème de la détermination de la représentation dans la prise de décision à la majorité. Si la majorité était basée sur une adresse IP, un vote, elle pourrait être renversée par toute personne capable d&#39;allouer de nombreuses adresses IP. La preuve de travail est essentiellement un processeur, un vote. La décision majoritaire est représentée par la chaîne la plus longue, qui a investi le plus grand effort de preuve de travail. Si la majorité de la puissance du processeur est contrôlée par des nœuds honnêtes, la chaîne honnête se développera le plus rapidement et dépassera toutes les chaînes concurrentes. Pour modifier un bloc passé, un attaquant devrait refaire la preuve de travail du bloc et de tous les blocs qui le suivent, puis rattraper et dépasser le travail des nœuds honnêtes. Nous montrerons plus tard que la probabilité qu&#39;une attaque plus lente rattrape le système, diminue de manière exponentielle à mesure que des blocs ultérieurs sont ajoutés.</simpara>
<simpara>Pour compenser l&#39;augmentation de la vitesse matérielle et l&#39;intérêt variable pour l&#39;exécution des nœuds au fil du temps, la difficulté de la preuve de travail est déterminée par une moyenne mobile ciblant un nombre moyen de blocs par heure. S&#39;ils sont générés trop rapidement, la difficulté augmente.</simpara>
</section>
<section id="_réseau">
<title>Réseau</title>
<simpara>Les étapes pour exécuter le réseau sont les suivantes :</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Les nouvelles transactions sont diffusées à tous les nœuds.
</simpara>
</listitem>
<listitem>
<simpara>
Chaque nœud collecte les nouvelles transactions dans un bloc.
</simpara>
</listitem>
<listitem>
<simpara>
Chaque nœud travaille à trouver une preuve de travail difficile pour son bloc.
</simpara>
</listitem>
<listitem>
<simpara>
Lorsqu&#39;un nœud trouve une preuve de travail, il diffuse le bloc à tous les nœuds.
</simpara>
</listitem>
<listitem>
<simpara>
Les nœuds n&#39;acceptent le bloc que si toutes les transactions qu&#39;il contient sont valides et non déjà dépensées.
</simpara>
</listitem>
<listitem>
<simpara>
Les nœuds expriment leur acceptation du bloc en travaillant à la création du bloc suivant dans la chaîne, en utilisant le hachage du bloc accepté comme hachage précédent.
</simpara>
</listitem>
</orderedlist>
<simpara>Les nœuds considèrent toujours que la chaîne la plus longue est la bonne et continueront à travailler pour l&#39;étendre. Si deux nœuds diffusent simultanément des versions différentes du bloc suivant, certains nœuds peuvent recevoir l&#39;un ou l&#39;autre en premier. Dans ce cas, ils travaillent sur la première branche qu&#39;ils ont reçue, mais conservent l&#39;autre branche au cas où elle deviendrait plus longue. L&#39;égalité sera rompue lorsque la prochaine preuve de travail sera trouvée et qu&#39;une branche s&#39;allongera ; les nœuds qui travaillaient sur l&#39;autre branche passeront alors à la plus longue.</simpara>
<simpara>Les diffusions de nouvelles transactions n&#39;ont pas nécessairement besoin d&#39;atteindre tous les nœuds. Tant qu&#39;ils atteignent de nombreux nœuds, ils entreront dans un bloc avant longtemps. Les diffusions en bloc sont également tolérantes aux messages abandonnés. Si un nœud ne reçoit pas de bloc, il le demandera lorsqu&#39;il recevra le bloc suivant et réalisera qu&#39;il en a manqué un.</simpara>
</section>
<section id="_incitatif">
<title>Incitatif</title>
<simpara>Par convention, la première transaction d&#39;un bloc est une transaction spéciale qui démarre une nouvelle pièce appartenant au créateur du bloc. Cela ajoute une incitation pour les nœuds à prendre en charge le réseau et fournit un moyen de distribuer initialement les pièces en circulation, car il n&#39;y a pas d&#39;autorité centrale pour les émettre. L&#39;ajout régulier d&#39;une quantité constante de nouvelles pièces est analogue aux mineurs d&#39;or qui dépensent des ressources pour ajouter de l&#39;or à la circulation. Dans notre cas, c&#39;est le temps CPU et l&#39;électricité qui sont dépensés.</simpara>
<simpara>L&#39;incitation peut également être financée par des frais de transaction. Si la valeur de sortie d&#39;une transaction est inférieure à sa valeur d&#39;entrée, la différence est une commission de transaction qui s&#39;ajoute à la valeur incitative du bloc contenant la transaction. Une fois qu&#39;un nombre prédéterminé de pièces est entré en circulation, l&#39;incitation peut passer entièrement aux frais de transaction et être totalement exempte d&#39;inflation.</simpara>
<simpara>L&#39;incitation peut aider à encourager les nœuds à rester honnêtes. Si un attaquant cupide est capable d&#39;assembler plus de puissance CPU que tous les nœuds honnêtes, il devrait choisir entre l&#39;utiliser pour frauder les gens en volant leur paiements, ou l&#39;utiliser pour générer de nouvelles pièces. Il devrait trouver plus avantageux de jouer selon les règles que de saper le système et la validité de sa propre richesse. De telles règles le favorise avec plus de nouvelles pièces plus que tout les nœuds réunis.</simpara>
</section>
<section id="_récupération_d_39_espace_disque">
<title>Récupération d&#39;espace disque</title>
<p>Une fois que la dernière transaction d&#39;une pièce est enterrée sous suffisamment de blocs, les transactions passées avant peuvent être supprimées pour économiser de l&#39;espace disque. Pour faciliter cela sans casser le hachage du bloc, les transactions sont hachées dans un arbre Merkle <a href="#ref_seven">[7]</a> <a href="#ref_two">[2]</a> <a href="#ref_five">[5]</a> , avec seulement la racine incluse dans le hachage du bloc. Les vieux blocs peuvent ensuite être compactés en écrasant les branches de l&#39;arbre. Les hachages intérieurs n&#39;ont pas besoin d&#39;être stockés.</p>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_abin04.png"/>
  </imageobject>
  <textobject><phrase>disk</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Un en-tête de bloc sans transactions serait d&#39;environ 80 octets. Si nous supposons que les blocs sont générés toutes les 10 minutes, <literal>80 octets * 6 * 24 * 365 = 4,2 Mo</literal> par an. Avec des systèmes informatiques se vendant généralement avec 2 Go de RAM à partir de 2008 et la loi de Moore prédisant une croissance actuelle de 1,2 Go par an, le stockage ne devrait pas être un problème même si les en-têtes de bloc doivent être conservés en mémoire.</simpara>
</section>
<section id="_vérification_de_paiement_simplifiée">
<title>Vérification de paiement simplifiée</title>
<simpara>Il est possible de vérifier les paiements sans exécuter un nœud de réseau complet. Un utilisateur n&#39;a besoin que de conserver une copie des en-têtes de bloc de la chaîne de preuve de travail la plus longue, qu&#39;il peut obtenir en interrogeant les nœuds du réseau jusqu&#39;à ce qu&#39;il soit convaincu qu&#39;il a la chaîne la plus longue, et d&#39;obtenir la branche Merkle reliant la transaction au bloc dont il est horodaté. Il ne peut pas vérifier la transaction par lui-même, mais en la liant à un endroit de la chaîne, il peut voir qu&#39;un nœud du réseau l&#39;a acceptée, et les blocs ajoutés après confirment que le réseau l&#39;a acceptée aussi.</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_abin05.png"/>
  </imageobject>
  <textobject><phrase>&quot;spv&quot;</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Ainsi, la vérification est fiable tant que des nœuds honnêtes contrôlent le réseau, mais est plus vulnérable si le réseau est maîtrisé par un attaquant. Alors que les nœuds du réseau peuvent vérifier les transactions par eux-mêmes, la méthode simplifiée peut être trompée par les transactions fabriquées par un attaquant, tant que l&#39;attaquant peut continuer à maîtriser le réseau. Une stratégie de protection contre cela consisterait à accepter les alertes des nœuds du réseau lorsqu&#39;ils détectent un bloc invalide, incitant le logiciel de l&#39;utilisateur à télécharger le bloc complet et les transactions alertées pour confirmer l&#39;incohérence. Les entreprises qui reçoivent des paiements fréquents voudront probablement toujours exécuter leurs propres nœuds pour une sécurité plus indépendante et une vérification plus rapide.</simpara>
</section>
<section id="_combiner_et_diviser_la_valeur">
<title>Combiner et diviser la valeur</title>
<simpara>Bien qu&#39;il soit possible de gérer les pièces individuellement, il serait difficile d&#39;effectuer une transaction distincte pour chaque centime d&#39;un transfert. Pour permettre à la valeur d&#39;être fractionnée et combinée, les transactions contiennent plusieurs entrées et sorties. Normalement, il y aura soit une seule entrée provenant d&#39;une transaction précédente plus importante, soit plusieurs entrées combinant des montants plus petits, et au plus deux sorties : une pour le paiement et une renvoyant la monnaie, le cas échéant, à l&#39;expéditeur.</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_abin06.png"/>
  </imageobject>
  <textobject><phrase>&quot;combining-splitting&quot;</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Il convient de noter que la diffusion, où une transaction dépend de plusieurs transactions, et ces transactions dépendent de beaucoup d&#39;autres, n&#39;est pas un problème ici. Il n&#39;est jamais nécessaire d&#39;extraire une copie autonome complète de l&#39;historique d&#39;une transaction.</simpara>
</section>
<section id="_confidentialité">
<title>Confidentialité</title>
<simpara>Le modèle bancaire traditionnel atteint un niveau de confidentialité en limitant l&#39;accès aux informations des parties concernées et au tierce partie de confiance. La nécessité d&#39;annoncer publiquement toutes les transactions exclut cette méthode, mais la confidentialité peut toujours être préservée en interrompant le flux d&#39;informations à un autre endroit : en gardant les clés publiques anonymes. Le public peut voir que quelqu&#39;un envoie un montant à quelqu&#39;un d&#39;autre, mais sans information liant la transaction à qui que ce soit. Ceci est similaire au niveau d&#39;information publié par les bourses, où l&#39;heure et la taille des transactions individuelles, la &quot;bande&quot;, sont rendues publiques, mais sans dire qui étaient les parties.</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_abin07.png"/>
  </imageobject>
  <textobject><phrase>&quot;vie privée&quot;</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>En tant que pare-feu supplémentaire, une nouvelle paire de clés doit être utilisée pour chaque transaction afin d&#39;éviter qu&#39;elles ne soient liées à un propriétaire commun. Certains liens sont encore inévitables avec les transactions multi-entrées, qui révèlent nécessairement que leurs entrées appartenaient au même propriétaire. Le risque est que si le propriétaire d&#39;une clé est révélé, la liaison pourrait révéler d&#39;autres transactions ayant appartenu au même propriétaire.</simpara>
</section>
<section id="_calculs">
<title>Calculs</title>
<simpara>Nous considérons le scénario d&#39;un attaquant essayant de générer une chaîne alternative plus rapidement que la chaîne honnête. Même si cela est accompli, cela n&#39;ouvre pas le système à des changements arbitraires, comme créer de la valeur à partir de rien ou prendre de l&#39;argent qui n&#39;a jamais appartenu à l&#39;attaquant. Les nœuds n&#39;accepteront pas une transaction invalide comme paiement, et les nœuds honnêtes n&#39;accepteront jamais un bloc les contenant. Un attaquant ne peut essayer de modifier qu&#39;une de ses propres transactions pour récupérer l&#39;argent qu&#39;il a récemment dépensé.</simpara>
<simpara>La course entre la chaîne honnête et une chaîne attaquante peut être caractérisée comme une marche aléatoire binomiale. L&#39;événement de succès est la chaîne honnête prolongée d&#39;un bloc, augmentant son avance de +1, et l&#39;événement d&#39;échec est la chaîne de l&#39;attaquant prolongée d&#39;un bloc, réduisant l&#39;écart de -1.</simpara>
<p>La probabilité qu&#39;un attaquant rattrape un déficit donné est analogue à un problème de la ruine du joueur (Gambler&#39;s Ruin). Supposons qu&#39;un joueur avec un crédit illimité commence avec un déficit et joue potentiellement un nombre infini d&#39;essais pour essayer d&#39;atteindre le seuil de rentabilité. Nous pouvons calculer la probabilité qu&#39;il atteigne jamais le seuil de rentabilité, ou qu&#39;un attaquant rattrape jamais la chaîne honnête, comme suit <a href="#ref_eight">[8]</a>:</p>
<simpara>p = probabilité qu&#39;un nœud honnête trouve le bloc suivant</simpara>
<simpara>q = probabilité que l&#39;attaquant trouve le bloc suivant</simpara>
<simpara>q<subscript>z</subscript> = probabilité que l&#39;attaquant rattrape jamais z blocs derrière</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_abin08.png"/>
  </imageobject>
  <textobject><phrase>&quot;eq1&quot;</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Étant donné notre hypothèse que p &gt; q, la probabilité chute de façon exponentielle à mesure que le nombre de blocs que l&#39;attaquant doit rattraper augmente. Avec les chances contre lui, s&#39;il n&#8217;a pas un coup de chance deavant dès le début, ses chances deviennent infiniment petites à mesure qu&#39;il prend du retard.</simpara>
<simpara>Nous considérons maintenant combien de temps le destinataire d&#39;une nouvelle transaction doit attendre avant d&#39;être suffisamment certain que l&#39;expéditeur ne peut pas modifier la transaction. Nous supposons que l&#39;expéditeur est un attaquant qui veut faire croire au destinataire qu&#39;il l&#39;a payé pendant un certain temps, puis le changer pour se rembourser après un certain temps. Le destinataire sera alerté lorsque cela se produira, mais l&#39;expéditeur espère qu&#39;il sera trop tard.</simpara>
<simpara>Le récepteur génère une nouvelle paire de clés et donne la clé publique à l&#39;expéditeur peu de temps avant la signature. Cela évite à l&#39;expéditeur de préparer une chaîne de blocs à l&#39;avance en y travaillant continuellement jusqu&#39;à ce qu&#39;il ait la chance d&#39;aller assez loin, puis d&#39;exécuter la transaction à ce moment-là. Une fois la transaction envoyée, l&#39;expéditeur malhonnête commence à travailler en secret sur une chaîne parallèle contenant une version alternative de sa transaction.</simpara>
<simpara>Le destinataire attend que la transaction ait été ajoutée à un bloc et que z blocs aient été liés après celle-ci. Il ne connaît pas la progression exacte de l&#39;attaquant, mais en supposant que les blocs honnêtes ont pris le temps moyen attendu par bloc, la progression potentielle de l&#39;attaquant sera une distribution de Poisson avec une valeur attendue :</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_abin09.png"/>
  </imageobject>
  <textobject><phrase>&quot;eq2&quot;</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Pour obtenir la probabilité que l&#39;attaquant puisse encore rattraper maintenant, nous multiplions la densité de Poisson pour chaque quantité de progrès qu&#39;il aurait pu faire par la probabilité qu&#39;il puisse rattraper à partir de ce point :</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_abin10.png"/>
  </imageobject>
  <textobject><phrase>&quot;eq3&quot;</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Réorganiser pour éviter de faire la somme de la queue infinie de la distribution&#8230;</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mbc2_abin11.png"/>
  </imageobject>
  <textobject><phrase>&quot;eq4&quot;</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Conversion en code C&#8230;</simpara>
<programlisting language="c" linenumbering="unnumbered">#include &lt;math.h&gt;
double AttackerSuccessProbability(double q, int z)
{
    double p = 1.0 - q;
    double lambda = z * (q / p);
    double sum = 1.0;
    int i, k;
    for (k = 0; k &lt;= z; k++)
    {
        double poisson = exp(-lambda);
        for (i = 1; i &lt;= k; i++)
            poisson *= lambda / i;
        sum -= poisson * (1 - pow(q / p, z - k));
    }
    return sum;
}</programlisting>
<simpara>En exécutant certains résultats, nous pouvons voir la probabilité chuter de façon exponentielle avec z.</simpara>
<screen>q=0.1
z=0 P=1.0000000
z=1 P=0.2045873
z=2 P=0.0509779
z=3 P=0.0131722
z=4 P=0.0034552
z=5 P=0.0009137
z=6 P=0.0002428
z=7 P=0.0000647
z=8 P=0.0000173
z=9 P=0.0000046
z=10 P=0.0000012</screen>
<screen>q=0.3
z=0 P=1.0000000
z=5 P=0.1773523
z=10 P=0.0416605
z=15 P=0.0101008
z=20 P=0.0024804
z=25 P=0.0006132
z=30 P=0.0001522
z=35 P=0.0000379
z=40 P=0.0000095
z=45 P=0.0000024
z=50 P=0.0000006</screen>
<simpara>Résolution pour P inférieur à 0,1 %&#8230;</simpara>
<screen>P &lt; 0.001
q=0.10 z=5
q=0.15 z=8
q=0.20 z=11
q=0.25 z=15
q=0.30 z=24
q=0.35 z=41
q=0.40 z=89
q=0.45 z=340</screen>
</section>
<section id="_conclusion">
<title>Conclusion</title>
<simpara>Nous avons proposé un système de transactions électroniques sans reposer sur la confiance. Nous avons commencé avec le cadre habituel des pièces fabriquées à partir de signatures numériques, qui offre un fort contrôle de propriété, mais qui est incomplet sans un moyen d&#39;éviter les doubles dépenses. Pour résoudre ce problème, nous avons proposé un réseau pair à pair utilisant la preuve de travail pour enregistrer un historique public des transactions qui devient rapidement impossible à modifier par un attaquant si des nœuds honnêtes contrôlent la majorité de la puissance du processeur. Le réseau est robuste dans sa simplicité non structurée. Les nœuds fonctionnent tous en même temps avec peu de coordination. Ils n&#39;ont pas besoin d&#39;être identifiés, car les messages ne sont pas acheminés vers un endroit particulier et ne doivent être livrés que dans la mesure du possible. Les nœuds peuvent quitter et rejoindre le réseau à volonté, acceptant la chaîne de preuve de travail comme preuve de ce qui s&#39;est passé pendant leur absence. Ils votent avec leur puissance CPU, exprimant leur acceptation des blocs valides en travaillant à les étendre et rejetant les blocs invalides en refusant de travailler dessus. Toutes les règles et incitations nécessaires peuvent être appliquées avec ce mécanisme de consensus.</simpara>
</section>
<section id="_références">
<title>Références</title>
<p>
<span id="ref_one">[1]</span> W. Dai, "b-money," <a href="http://www.weidai.com/bmoney.txt"><em>http://www.weidai.com/bmoney.txt</em></a>, 1998.
</p>
<p>
<span id="ref_two">[2]</span> H. Massias, X.S. Avila, and J.-J. Quisquater, "Design of a secure timestamping service with minimal trust requirements," In 20th Symposium on Information Theory in the Benelux, May 1999.
</p>
<p>
<span id="ref_three">[3]</span> S. Haber, W.S. Stornetta, "How to time-stamp a digital document," In Journal of Cryptology, vol 3, no 2, pages 99-111, 1991.
</p>

<p>
<span id="ref_four">[4]</span> D. Bayer, S. Haber, W.S. Stornetta, "Improving the efficiency and reliability of digital time-stamping," In Sequences II: Methods in Communication, Security and Computer Science, pages 329-334, 1993.
</p>

<p>
<span id="ref_five">[5]</span> S. Haber, W.S. Stornetta, "Secure names for bit-strings," In Proceedings of the 4th ACM Conference on Computer and Communications Security, pages 28-35, April 1997.
</p>

<p>
<span id="ref_six">[6]</span> A. Back, "Hashcash - a denial of service counter-measure," <a href="http://www.hashcash.org/papers/hashcash.pdf"><em>http://www.hashcash.org/papers/hashcash.pdf</em></a>, 2002.
</p>

<p>
<span id="ref_seven">[7]</span> R.C. Merkle, "Protocols for public key cryptosystems," In Proc. 1980 Symposium on Security and Privacy, IEEE Computer Society, pages 122-133, April 1980.
</p>

<p>
<span id="ref_eight">[8]</span> W. Feller, "An introduction to probability theory and its applications," 1957.
</p>
</section>
</section>
<section id="_licence">
<title>Licence</title>
<simpara><indexterm>
  <primary>&quot;licences open source&quot;</primary>
</indexterm>Ce livre blanc a été publié en octobre 2008 par Satoshi Nakamoto. Il a ensuite été (2009) ajouté comme documentation de support au logiciel bitcoin, qui porte la même licence MIT. Il a été reproduit dans ce livre, sans modification autre que la mise en forme, selon les termes de la licence MIT :</simpara>
<simpara>The MIT License (MIT)
Copyright (c) 2008 Satoshi Nakamoto</simpara>
<simpara>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</simpara>
<simpara>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</simpara>
<simpara>THE SOFTWARE IS PROVIDED "AS IS," WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.<indexterm>
  <primary></primary>
</indexterm><indexterm>
  <primary></primary>
</indexterm><indexterm>
  <primary></primary>
</indexterm></simpara>
</section>
</appendix>
</article>
